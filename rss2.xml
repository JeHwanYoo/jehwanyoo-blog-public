<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JeHwan PL Note</title>
    <link>https://jehwanyoo.net/</link>
    
    <atom:link href="https://jehwanyoo.net/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프로그래밍 노트, 팁, 강의등을 게시하는 블로그입니다.</description>
    <pubDate>Mon, 14 Mar 2022 08:13:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>머신 러닝을 해보자 8장 - Keras의 Layers API와 Model API에 대하여</title>
      <link>https://jehwanyoo.net/2022/03/11/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-8%EC%9E%A5-Keras-Layer-%EB%B6%84%EC%84%9D/</link>
      <guid>https://jehwanyoo.net/2022/03/11/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-8%EC%9E%A5-Keras-Layer-%EB%B6%84%EC%84%9D/</guid>
      <pubDate>Fri, 11 Mar 2022 04:15:42 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Keras-API&quot;&gt;&lt;a href=&quot;#Keras-API&quot; class=&quot;headerlink&quot; title=&quot;Keras API&quot;&gt;&lt;/a&gt;Keras API&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://keras.io/api/&quot;&gt;Docum</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Keras-API"><a href="#Keras-API" class="headerlink" title="Keras API"></a>Keras API</h2><hr><p><a href="https://keras.io/api/">Document Link</a></p><h2 id="Keras-주요-포인트"><a href="#Keras-주요-포인트" class="headerlink" title="Keras 주요 포인트"></a>Keras 주요 포인트</h2><hr><ol><li>Layers API (Base Layer Class, Core Layer Class)</li><li>Model API (Sequential Class)</li></ol><h2 id="Base-Layer-Class"><a href="#Base-Layer-Class" class="headerlink" title="Base Layer Class"></a><a href="https://keras.io/api/layers/base_layer/#layer-class">Base Layer Class</a></h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.layers.Layer(</span><br><span class="line">    trainable=<span class="literal">True</span>, name=<span class="literal">None</span>, dtype=<span class="literal">None</span>, dynamic=<span class="literal">False</span>, **kwargs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>가중치(Weight)와 바이어스(Bias)를 가지고 있는 신경망 계층 클래스이다.</p><p>Keras의 다양한 신경망 계층들은 모두 이 Layer 클래스를 상속한다.</p><p>가중치와 바이어스는 입력 값이 들어왔을 때 제약사항에 따라 초기화 된다. (<code>kernel_intializer</code>, <code>bias_initializer</code>, … 등등)</p><img src='https://i.ibb.co/CwZTyTt/2022-03-11-3-43-27.png' width='600px' alt='keras layer' /><h2 id="Core-Layers"><a href="#Core-Layers" class="headerlink" title="Core Layers"></a><a href="https://keras.io/api/layers/core_layers/">Core Layers</a></h2><hr><h3 id="Input-Object"><a href="#Input-Object" class="headerlink" title="Input Object"></a><a href="https://keras.io/api/layers/core_layers/input/">Input Object</a></h3><p>입력 객체(Input Object)는 텐서 타입을 갖는 추상 객체이다.</p><p>실제 입력 데이터는 아니며, 입력 데이터가 형태가 이렇다라는 것을 의미한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Input</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">weights = [</span><br><span class="line">           np.array([[-<span class="number">0.43890882</span>],[ <span class="number">0.23219848</span>]]), <span class="comment"># Weight</span></span><br><span class="line">           np.array([<span class="number">1.</span>]), <span class="comment"># Bias</span></span><br><span class="line">           ]</span><br><span class="line"></span><br><span class="line">dense = Dense(units=<span class="number">1</span>, input_shape=(<span class="number">1</span>, <span class="number">2</span>), weights=weights)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;before passing x: &#x27;</span>, dense.get_weights()) <span class="comment"># 입력 값이 넘어오기 전까지 가중치가 초기화되지 않는다.</span></span><br><span class="line"></span><br><span class="line">x = Input(shape=(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">y = dense(x)</span><br><span class="line"></span><br><span class="line">W, b = dense.get_weights()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y = &#x27;</span>, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;after passing x: &#x27;</span>, W.shape, b.shape)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before passing x:  []</span><br><span class="line">y =  KerasTensor(type_spec=TensorSpec(shape=(None, 1, 1), dtype=tf.float32, name=None), name=&#x27;dense_158/BiasAdd:0&#x27;, description=&quot;created by layer &#x27;dense_158&#x27;&quot;)</span><br><span class="line">after passing x:  (2, 1) (1,)</span><br></pre></td></tr></table></figure><p>Input Object는 추상 데이터이기 때문에 y값이 구체화 되지 않는다.</p><p>가중치와 바이어스가 입력 값이 들어왔을 때 초기화되는데, 실제로 Input Object를 넣으면 초기화되는 것을 볼 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Input</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">x = Input(shape=(<span class="number">32</span>,))</span><br><span class="line">y = Dense(<span class="number">16</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)(x)</span><br><span class="line">model = Model(x, y)</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Model: &quot;model_3&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line"> Layer (type)                Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line"> input_15 (InputLayer)       [(None, 32)]              0         </span><br><span class="line">                                                                 </span><br><span class="line"> dense_152 (Dense)           (None, 16)                528       </span><br><span class="line">                                                                 </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 528</span><br><span class="line">Trainable params: 528</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><p>Input Object를 이용하면 구체적인 데이터 없어도 신경망을 설계할 수 있다.</p><h3 id="Dense-Layer"><a href="#Dense-Layer" class="headerlink" title="Dense Layer"></a><a href="https://keras.io/api/layers/core_layers/dense/">Dense Layer</a></h3><p>완전 연결 계층(Fully Connected Layer)</p><img src='https://i.ibb.co/D1nvcQT/001.jpg' width='600px' alt='Dense Layer' /><h3 id="Activation-Layer"><a href="#Activation-Layer" class="headerlink" title="Activation Layer"></a><a href="https://keras.io/api/layers/core_layers/activation/">Activation Layer</a></h3><p>활성화 계층(Activation Layer)</p><ul><li>Activation Class를 이용한 방법</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Activation</span><br><span class="line"></span><br><span class="line">x = tf.random.normal(shape=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">sigmoid = Activation(<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">tanh = Activation(<span class="string">&#x27;tanh&#x27;</span>)</span><br><span class="line">relu = Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">softmax = Activation(<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line"></span><br><span class="line">y_sigmoid_tf = sigmoid(x)</span><br><span class="line">y_tanh_tf = tanh(x)</span><br><span class="line">y_relu_tf = relu(x)</span><br><span class="line">y_softmax_tf = softmax(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x = <span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;simoid(x)= &#x27;</span>, y_sigmoid_tf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;tanh(x)= &#x27;</span>, y_tanh_tf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;relu(x)= &#x27;</span>, y_relu_tf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;softmax(x)= &#x27;</span>, y_softmax_tf)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [[-0.51983726  0.292437    0.27465725  0.9531079   1.0535461 ]]</span><br><span class="line">simoid(x)=  tf.Tensor([[0.3728903  0.5725926  0.5682359  0.72173977 0.74145526]], shape=(1, 5), dtype=float32)</span><br><span class="line">tanh(x)=  tf.Tensor([[-0.47757438  0.28437626  0.26795304  0.74118686  0.7831812 ]], shape=(1, 5), dtype=float32)</span><br><span class="line">relu(x)=  tf.Tensor([[0.         0.292437   0.27465725 0.9531079  1.0535461 ]], shape=(1, 5), dtype=float32)</span><br><span class="line">softmax(x)=  tf.Tensor([[0.06825311 0.15377602 0.1510661  0.29772434 0.3291805 ]], shape=(1, 5), dtype=float32)</span><br></pre></td></tr></table></figure><ul><li>ReLU, Softmax 등 구체화된 클래스를 이용하는 방법</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> ReLU, Softmax</span><br><span class="line"></span><br><span class="line">x = tf.random.normal(shape=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">relu = ReLU()</span><br><span class="line">softmax = Softmax()</span><br><span class="line"></span><br><span class="line">y_relu_tf = softmax(x)</span><br><span class="line">y_softmax_tf = relu(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;relu(x)= &#x27;</span>, y_relu_tf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;softmax(x)= &#x27;</span>, y_softmax_tf)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">relu(x)=  tf.Tensor([[0.08697527 0.3341398  0.5049807  0.01408062 0.05982368]], shape=(1, 5), dtype=float32)</span><br><span class="line">softmax(x)=  tf.Tensor([[0.        1.1802413 1.5932021 0.        0.       ]], shape=(1, 5), dtype=float32)</span><br></pre></td></tr></table></figure><ul><li>Dense Layer와 함께 사용</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">x = tf.random.normal(shape=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">dense = Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">y = dense(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[0.17379178 0.4849285  0.34127975]], shape=(1, 3), dtype=float32)</span><br></pre></td></tr></table></figure><img src='https://i.ibb.co/GRb0RmD/2022-03-11-3-57-42.png' width='600px' alt='Dense With Activation' /><h3 id="Embedding-Layer"><a href="#Embedding-Layer" class="headerlink" title="Embedding Layer"></a><a href="https://keras.io/ko/layers/embeddings/">Embedding Layer</a></h3><p>양의 정수(인덱스)가 주어졌을 때 고정된 크기의 Dense 벡터로 전환하는 계층</p><p>e.g. <code>[[4], [20]] -&gt; [[0.25, 0.1], [0.6, -0.2]]</code></p><p>단어 사전이라고도 불리며 텍스트 분류에서 많이 사용된다.</p><img src='https://i.ibb.co/mSSZYGz/001.jpg' width='600px' alt='embeddings' /><h3 id="Masking-Layer"><a href="#Masking-Layer" class="headerlink" title="Masking Layer"></a><a href="https://keras.io/api/layers/core_layers/masking/">Masking Layer</a></h3><p>특정 단계(timestamp)의 텐서 값을 모두 mask_value로 설정한 뒤, Masking Layer를 통과하면 그 단계는 건너뛴다.</p><h3 id="Lambda-Layer"><a href="#Lambda-Layer" class="headerlink" title="Lambda Layer"></a><a href="https://keras.io/api/layers/core_layers/lambda/">Lambda Layer</a></h3><p>Lambda 식을 이용해 수학적 함수를 직접 지정할 수 있는 계층</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">square = keras.layers.Lambda(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>)</span><br><span class="line">y = square(tf.constant(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(16, shape=(), dtype=int32)</span><br></pre></td></tr></table></figure><h2 id="Model-Class"><a href="#Model-Class" class="headerlink" title="Model Class"></a><a href="https://keras.io/api/models/model/">Model Class</a></h2><hr><p>모델은 학습을 위한 레이어들을 그룹화한 클래스이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"></span><br><span class="line">x = Input(shape=(<span class="number">3</span>,))</span><br><span class="line">a = Dense(<span class="number">4</span>, activation=tf.nn.relu)(x)</span><br><span class="line">y = Dense(<span class="number">5</span>, activation=tf.nn.softmax)(a)</span><br><span class="line">model = tf.keras.Model(inputs=x, outputs=y)</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">predicted = model.predict(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(predicted)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Model: &quot;model_7&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line"> Layer (type)                Output Shape              Param #   </span><br><span class="line">=================================================================</span><br><span class="line"> input_8 (InputLayer)        [(None, 3)]               0         </span><br><span class="line">                                                                 </span><br><span class="line"> dense_24 (Dense)            (None, 4)                 16        </span><br><span class="line">                                                                 </span><br><span class="line"> dense_25 (Dense)            (None, 5)                 25        </span><br><span class="line">                                                                 </span><br><span class="line">=================================================================</span><br><span class="line">Total params: 41</span><br><span class="line">Trainable params: 41</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br><span class="line">[[0.20138083 0.05447086 0.62297124 0.04173229 0.07944483]]</span><br></pre></td></tr></table></figure><p>흔히 사용하는 모델 클래스 중에는 Sequential 모델이 있다.</p><p>텐서플로우 문서에 따르면 다음과 같은 경우엔 Sequential이 부적합하다.</p><blockquote><p>Sequential 모델은 다음의 경우에 적합하지 않습니다.</p><p>모델에 다중 입력 또는 다중 출력이 있습니다</p><p>레이어에 다중 입력 또는 다중 출력이 있습니다</p><p>레이어 공유를 해야 합니다</p><p>비선형 토폴로지를 원합니다(예: 잔류 연결, 다중 분기 모델)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Input</span><br><span class="line"></span><br><span class="line">model = Sequential(</span><br><span class="line">    [</span><br><span class="line">        Input(shape=(<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">        Dense(units=<span class="number">2</span>, activation=<span class="string">&quot;relu&quot;</span>),</span><br><span class="line">        Dense(units=<span class="number">2</span>, activation=<span class="string">&quot;softmax&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">x = tf.random.normal((<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">predicited = model.predict(x)</span><br><span class="line"><span class="built_in">print</span>(predicited)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[[[0.68282527 0.31717473]</span><br><span class="line">  [0.53100306 0.46899694]]</span><br><span class="line"></span><br><span class="line"> [[0.86712956 0.13287047]</span><br><span class="line">  [0.72597367 0.27402633]]</span><br><span class="line"></span><br><span class="line"> [[0.55213726 0.44786274]</span><br><span class="line">  [0.9673605  0.0326395 ]]</span><br><span class="line"></span><br><span class="line"> [[0.5482915  0.45170853]</span><br><span class="line">  [0.9302453  0.06975465]]</span><br><span class="line"></span><br><span class="line"> [[0.6118701  0.38812986]</span><br><span class="line">  [0.9730487  0.02695133]]]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/AI/">AI</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Machine-Learning/">Machine Learning</category>
      
      <category domain="https://jehwanyoo.net/tags/AI/">AI</category>
      
      <category domain="https://jehwanyoo.net/tags/Deep-Learning/">Deep Learning</category>
      
      <category domain="https://jehwanyoo.net/tags/Keras/">Keras</category>
      
      <category domain="https://jehwanyoo.net/tags/Layers-API/">Layers API</category>
      
      <category domain="https://jehwanyoo.net/tags/Model-API/">Model API</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/11/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-8%EC%9E%A5-Keras-Layer-%EB%B6%84%EC%84%9D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신 러닝을 해보자 7장 - 텐서플로우로 MNIST 손글씨 분류</title>
      <link>https://jehwanyoo.net/2022/03/09/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-7%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0%EB%A1%9C-MNIST-%EC%86%90%EA%B8%80%EC%94%A8-%EB%B6%84%EB%A5%98/</link>
      <guid>https://jehwanyoo.net/2022/03/09/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-7%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0%EB%A1%9C-MNIST-%EC%86%90%EA%B8%80%EC%94%A8-%EB%B6%84%EB%A5%98/</guid>
      <pubDate>Wed, 09 Mar 2022 06:02:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;딥러닝-아키텍처&quot;&gt;&lt;a href=&quot;#딥러닝-아키텍처&quot; class=&quot;headerlink&quot; title=&quot;딥러닝 아키텍처&quot;&gt;&lt;/a&gt;딥러닝 아키텍처&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;교재(머신러닝을 위한 파이썬 한 조각)의 257 페이지 내용을 텐서플로우 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="딥러닝-아키텍처"><a href="#딥러닝-아키텍처" class="headerlink" title="딥러닝 아키텍처"></a>딥러닝 아키텍처</h2><hr><p>교재(머신러닝을 위한 파이썬 한 조각)의 257 페이지 내용을 텐서플로우 2.0 버전으로 구현할 것임.</p><img src="https://i.ibb.co/Mckd5gt/Kakao-Talk-Photo-2022-03-07-20-32-08.jpg" alt="deep learning architecture" width="600" /><h2 id="Relu-함수-은닉층"><a href="#Relu-함수-은닉층" class="headerlink" title="Relu 함수 (은닉층)"></a>Relu 함수 (은닉층)</h2><hr><p>Relu 함수는 x가 0보다 큰 경우에만 출력을 활성화한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">5.0</span>, <span class="number">5.1</span>, <span class="number">0.1</span>)</span><br><span class="line">y = relu(x)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;relu&#x27;</span>, fontsize=<span class="number">25</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">15</span>, rotation=<span class="number">0</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.axvline(<span class="number">0.0</span>, color=<span class="string">&#x27;grey&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/W6N7bc0/relu.png" alt="relu function"></p><h2 id="Softmax-함수-출력층"><a href="#Softmax-함수-출력층" class="headerlink" title="Softmax 함수 (출력층)"></a>Softmax 함수 (출력층)</h2><hr><p>$\textrm{softmax}(Z_{i}) = \frac{e^{Z_{i}}}{\sum_{k=1}^{n}{e^{Z_{k}}}}$</p><p>softmax 함수는 모든 결과의 합이 1이되는 함수이다. 즉, 활성화 값이 확률을 나타낸다고 해석할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span>(<span class="params">z</span>):</span></span><br><span class="line">    exp_z = np.exp(z)</span><br><span class="line">    <span class="keyword">return</span> exp_z / np.<span class="built_in">sum</span>(exp_z)</span><br><span class="line"></span><br><span class="line">x = np.random.randn(<span class="number">5</span>)</span><br><span class="line">y = softmax(x)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;softmax&#x27;</span>, fontsize=<span class="number">25</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">15</span>, rotation=<span class="number">0</span>)</span><br><span class="line">plt.pie(y, labels=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/J394k62/softmax.png" alt="softmax"></p><h2 id="MNIST-손글씨-데이터-불러오기"><a href="#MNIST-손글씨-데이터-불러오기" class="headerlink" title="MNIST 손글씨 데이터 불러오기"></a>MNIST 손글씨 데이터 불러오기</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(x_train, t_train), (x_test, t_test) = mnist.load_data() </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x_train.shape=<span class="subst">&#123;x_train.shape&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y_train.shape=<span class="subst">&#123;t_train.shape&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x_test.shape=<span class="subst">&#123;x_test.shape&#125;</span>&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y_test.shape=<span class="subst">&#123;t_test.shape&#125;</span>&#x27;</span>) </span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(x_train[<span class="number">0</span>], cmap=plt.cm.binary)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_train.shape=(60000, 28, 28)</span><br><span class="line">y_train.shape=(60000,)</span><br><span class="line">x_test.shape=(10000, 28, 28)</span><br><span class="line">y_test.shape=(10000,)</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/HNgBNzp/mnist1.png" alt="mnist1"></p><p>mnist의 손글씨 데이터는 0에서 255의 밝기를 갖고 있는 28x28 이미지이다.</p><p>학습용 데이터 6만개와 테스트용 데이터 1만개의 세트가 있다.</p><h2 id="MNIST-정규화"><a href="#MNIST-정규화" class="headerlink" title="MNIST 정규화"></a>MNIST 정규화</h2><hr><p>$x_{new} = \frac{x-x_{min}}{x_{max}-x_{min}}$</p><p>예를 들어 0부터 255사이의 값을 정규화 한다면</p><p>$x_{max} = 255,\ x_{min} = 0$</p><p>$x_{new} = \frac{x}{255}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(x_train, t_train), (x_test, t_test) = mnist.load_data() </span><br><span class="line"></span><br><span class="line">x_train = x_train / <span class="number">255.</span></span><br><span class="line">x_test = x_test / <span class="number">255.</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(x_train[<span class="number">0</span>], cmap=plt.cm.binary)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/59HyHtQ/mnist2.png" alt="mnist2"></p><p>밝기의 값이 0에서 1사이로 정규화 되었다.</p><p>0에서 1사이로 정규화를 해야 cross-entropy 식에서 오버플로우가 발생하지 않는다.</p><h2 id="손실-함수-선택"><a href="#손실-함수-선택" class="headerlink" title="손실 함수 선택"></a>손실 함수 선택</h2><hr><h3 id="Classfication-문제의-손실-함수-종류"><a href="#Classfication-문제의-손실-함수-종류" class="headerlink" title="Classfication 문제의 손실 함수 종류"></a>Classfication 문제의 손실 함수 종류</h3><ul><li><p>Binary Cross-Entropy Error</p><ul><li>정답 데이터가 0또는 1의 이진 값인 경우</li></ul></li><li><p>Categorical Cross-Entropy Error</p><ul><li>정답 데이터가 one-hot encoding인 경우</li></ul></li><li><p>Sparse Categorical Cross-Entropy Error</p><ul><li>정답 데이터가 정수인 경우</li></ul></li></ul><p>본 프로젝트에선 one-hot encoding으로 정답으로 치환하겠다.</p><h3 id="one-hot-encoding"><a href="#one-hot-encoding" class="headerlink" title="one-hot encoding"></a>one-hot encoding</h3><p>0부터 9까지 총 10개의 분류 항목이 존재한다면</p><p>ex) 5 → [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"></span><br><span class="line">t_train_categorical = to_categorical(t_train, <span class="number">10</span>)</span><br><span class="line">t_test_categorical = to_categorical(t_test, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="Model-생성"><a href="#Model-생성" class="headerlink" title="Model 생성"></a>Model 생성</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Flatten</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">                    Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">                    Dense(units=<span class="number">100</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">                    Dense(units=<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>),</span><br><span class="line">                    ])</span><br></pre></td></tr></table></figure><p>모델 생성 단계는 신경망 계층을 구성하는 단계이다.</p><p>설계된 아키텍처에 맞춰 신경망 계층을 구성한다.</p><h2 id="Model-컴파일"><a href="#Model-컴파일" class="headerlink" title="Model 컴파일"></a>Model 컴파일</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p>모델 컴파일 단계는 Hyper-Parameter나 손실 함수를 설정하고 신경망 계층이 구체화 되는 단계이다.</p><p>Tensorflow에 따르면, optimizer는 모델이 인식하는 데이터와 해당 손실 함수를 기반으로 모델이 업데이트되는 방식이다.</p><p>Adam Algorithm에 대한 정보는 <a href="https://keras.io/api/optimizers/adam/">공식 문서</a>를 참고하라.</p><p>loss는 말그대로 손실 함수를 설정한다.</p><p>metrics은 학습 단계에서 학습에 대한 결과의 의미가 무엇인지 설정한다.</p><p>손글씨 분류의 ‘정확도’를 알고 싶은 것이므로 accuracy로 설정한다.</p><h2 id="Model-학습"><a href="#Model-학습" class="headerlink" title="Model 학습"></a>Model 학습</h2><hr><p>모델 학습 단계는 컴파일된 모델을 바탕으로 입력 데이터와 정답데이터를 이용해 손실율을 낮추는 것이다.</p><p>epochs는 전체 데이터셋을 몇 번 학습 시킬건지 설정한다.</p><p>batch_size는 한번 feed forward를 진행할때 몇 개의 데이터셋을 입력으로 넣을건지 설정한다.</p><p>1 epoch당 학습 횟수는 (전체 데이터셋 크기 / batch_size)가 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(x_train, t_train_categorical, epochs=<span class="number">10</span>, batch_size=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Epoch 1/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.3473 - accuracy: 0.9053</span><br><span class="line">Epoch 2/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.1675 - accuracy: 0.9524</span><br><span class="line">Epoch 3/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.1219 - accuracy: 0.9649</span><br><span class="line">Epoch 4/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0958 - accuracy: 0.9728</span><br><span class="line">Epoch 5/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0772 - accuracy: 0.9777</span><br><span class="line">Epoch 6/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0639 - accuracy: 0.9813</span><br><span class="line">Epoch 7/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0532 - accuracy: 0.9843</span><br><span class="line">Epoch 8/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0449 - accuracy: 0.9872</span><br><span class="line">Epoch 9/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0384 - accuracy: 0.9890</span><br><span class="line">Epoch 10/10</span><br><span class="line">600/600 [==============================] - 2s 3ms/step - loss: 0.0324 - accuracy: 0.9904</span><br><span class="line">&lt;keras.callbacks.History at 0x7f6f42307d10&gt;</span><br></pre></td></tr></table></figure><h2 id="정확도-검증"><a href="#정확도-검증" class="headerlink" title="정확도 검증"></a>정확도 검증</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_loss, test_acc = model.evaluate(x_test,  t_test_categorical, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest accuracy:&#x27;</span>, test_acc)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">313/313 - 0s - loss: 0.0725 - accuracy: 0.9773 - 474ms/epoch - 2ms/step</span><br><span class="line"></span><br><span class="line">Test accuracy: 0.9772999882698059</span><br></pre></td></tr></table></figure><p>테스트 데이터를 이용해 정확도를 측정한다.</p><p>이 모델의 경우 테스트 데이터에서 약 98%의 정확도를 보인다.</p><h2 id="예측하기"><a href="#예측하기" class="headerlink" title="예측하기"></a>예측하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">predictions = model.predict(x_test)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">image</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.imshow(x_test[<span class="number">0</span>], cmap=plt.cm.binary)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">histogram</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.1</span>))</span><br><span class="line">thisplot = plt.bar(<span class="built_in">range</span>(<span class="number">10</span>), predictions[<span class="number">0</span>], color=<span class="string">&quot;#777777&quot;</span>)</span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">predicted_label = np.argmax(predictions[<span class="number">0</span>])</span><br><span class="line">thisplot[predicted_label].set_color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/jDtspxD/predictions.png" alt="predictions"></p><p>softmax 함수의 값 중 index=7의 값이 가장 높은 것을 알수 있다.</p><h2 id="학습-코드-전문"><a href="#학습-코드-전문" class="headerlink" title="학습 코드 전문"></a>학습 코드 전문</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Flatten</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(x_train, t_train), (x_test, t_test) = mnist.load_data() </span><br><span class="line"></span><br><span class="line">x_train = x_train / <span class="number">255.</span></span><br><span class="line">x_test = x_test / <span class="number">255.</span></span><br><span class="line"></span><br><span class="line">t_train_categorical = to_categorical(t_train, <span class="number">10</span>)</span><br><span class="line">t_test_categorical = to_categorical(t_test, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">                    Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">                    Dense(units=<span class="number">100</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">                    Dense(units=<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>),</span><br><span class="line">                    ])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, t_train_categorical, epochs=<span class="number">10</span>, batch_size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">test_loss, test_acc = model.evaluate(x_test,  t_test_categorical, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest accuracy:&#x27;</span>, test_acc)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/AI/">AI</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Machine-Learning/">Machine Learning</category>
      
      <category domain="https://jehwanyoo.net/tags/AI/">AI</category>
      
      <category domain="https://jehwanyoo.net/tags/Deep-Learning/">Deep Learning</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/09/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-7%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0%EB%A1%9C-MNIST-%EC%86%90%EA%B8%80%EC%94%A8-%EB%B6%84%EB%A5%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>프론트엔드 테스트를 위한 필수 API 총 정리 (ESM, Fetch, DOM, Event, Scroll, Lazy Load)</title>
      <link>https://jehwanyoo.net/2022/03/07/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-API-%EC%B4%9D-%EC%A0%95%EB%A6%AC-1-0-ESM-Fetch-DOM-API/</link>
      <guid>https://jehwanyoo.net/2022/03/07/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-API-%EC%B4%9D-%EC%A0%95%EB%A6%AC-1-0-ESM-Fetch-DOM-API/</guid>
      <pubDate>Mon, 07 Mar 2022 06:39:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;코딩테스트-시간-별-전략&quot;&gt;&lt;a href=&quot;#코딩테스트-시간-별-전략&quot; class=&quot;headerlink&quot; title=&quot;코딩테스트 시간 별 전략&quot;&gt;&lt;/a&gt;코딩테스트 시간 별 전략&lt;/h2&gt;&lt;p&gt;프론트엔드 코딩테스트에는 세가지 유형이 있다.&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="코딩테스트-시간-별-전략"><a href="#코딩테스트-시간-별-전략" class="headerlink" title="코딩테스트 시간 별 전략"></a>코딩테스트 시간 별 전략</h2><p>프론트엔드 코딩테스트에는 세가지 유형이 있다.</p><ul><li><p>단순 알고리즘 테스트</p><ul><li>그냥 알고리즘을 잘하면 된다!</li><li>프론트엔드에서 자주 나오는 유형은 아니다.</li></ul></li><li><p>시간이 촉박한 구현 테스트 (3시간 ~ 4시간)</p><ul><li>효율적인 구조를 신경쓰기보다 ‘빠르게 개발하는데’ 집중하라.</li><li>고득점을 위해서 효율적 구조를 빠르게 짜는 방법을 평소에 연습하라.(같은 동작이라면 효율적 구조가 더 높은 점수를 받을 것.)</li></ul></li><li><p>시간이 널널한 구현 테스트 (1일 ~ 1주일)</p><ul><li>현업에서 요구하는 정확한 방법으로 설계하라. (동작만 된다고 중요한게 아니다. 효율적 구조로 설계 못하면 광탈한다.)</li><li>웹 프론트엔드 설계 이론을 평소에 공부하라.</li></ul></li></ul><h2 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules">ESM</a></h2><hr><p>ESM이 모던 JavaScript의 표준으로 지정되면서 바닐라를 사용하는 코딩테스트에서도 ESM 사용을 요구하는 경우가 많아졌다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>script</code> 태그에서 <code>type</code>을 <code>module</code>로 지정하면 된다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name, draw, reportArea, reportPerimeter &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/square.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    function1 <span class="keyword">as</span> newFunctionName,</span><br><span class="line">    function2 <span class="keyword">as</span> anotherNewFunctionName</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이제 알고 있는대로 esm의 <code>import</code>와 <code>export</code> 문법을 사용하면 된다.</p><p>기존에는 script 태그의 순서대로 코드가 실행됐다면,</p><p>이제는 엔트리 포인트(index.js)를 중심으로 모듈 관계에 따라 코드가 실행된다.</p><p>여기서 주의할 점은 코딩테스트 환경에 맞춰 주소를 정확하게 기입해야한다.</p><p>Node.js 환경에 익숙한 사람들은 모듈을 불러올 때 보통 <code>js</code>를 생략한다.</p><p>그러나 esm을 브라우저에서 사용하려면 확장자인 <code>js</code>까지 ‘반드시’ 포함해야함을 잊지 말자.</p><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Fetch API</a></h2><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">myJson</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(myJson));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example POST method implementation:</span></span><br><span class="line"></span><br><span class="line">postData(<span class="string">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class="attr">answer</span>: <span class="number">42</span>&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data))) <span class="comment">// JSON-string from `response.json()` call</span></span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postData</span>(<span class="params">url = <span class="string">&#x27;&#x27;</span>, data = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Default options are marked with *</span></span><br><span class="line">    <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>, <span class="comment">// no-cors, cors, *same-origin</span></span><br><span class="line">        <span class="attr">cache</span>: <span class="string">&#x27;no-cache&#x27;</span>, <span class="comment">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class="line">        <span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span>, <span class="comment">// include, *same-origin, omit</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="comment">// &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>, <span class="comment">// manual, *follow, error</span></span><br><span class="line">        <span class="attr">referrer</span>: <span class="string">&#x27;no-referrer&#x27;</span>, <span class="comment">// no-referrer, *client</span></span><br><span class="line">        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(data), <span class="comment">// body data type must match &quot;Content-Type&quot; header</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()); <span class="comment">// parses JSON response into native JavaScript objects</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fetch API는 바닐라 환경에서 XMLHttpRequest보다 현대적이고 유려한 방법을 제공한다.</p><p>기본적으로 <code>GET Method</code>를 사용하며 Promise 패턴을 이용한다. (async 문법 가능)</p><p>아마 대부분의 코딩 테스트에서 <code>application/json</code> 형태로 request, reponse를 할 가능성이 높다.</p><p>fetch의 첫번째 인자는 주소를 입력하고, 두번째 인자에는 코딩테스트에서 요구하는 조건을 구성하면 된다.</p><h2 id="Node-생성"><a href="#Node-생성" class="headerlink" title="Node 생성"></a>Node 생성</h2><hr><h3 id="DOM-API를-읽기-전에-상속-관계-이해"><a href="#DOM-API를-읽기-전에-상속-관계-이해" class="headerlink" title="DOM API를 읽기 전에 - 상속 관계 이해"></a>DOM API를 읽기 전에 - 상속 관계 이해</h3><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/EventTarget">EventTarget</a> ← <a href="https://developer.mozilla.org/ko/docs/Web/API/Node">Node</a> ← <a href="https://developer.mozilla.org/ko/docs/Web/API/Element">Element</a> ← <a href="https://developer.mozilla.org/ko/docs/Web/API/HTMLElement">HTMLElement</a></li></ul><p>바닐라 JS를 하기 위해서는 DOM API의 상속 관계를 반드시 이해하기 바란다.</p><p>코딩 테스트는 라이브러리 개발이 아니므로 보통 <code>HTMLElement</code>만을 다루게 된다.</p><p>다시말해, 부모 클래스인 <code>EventTarget</code>, <code>Node</code>, <code>Element</code> 타입의 메서드를 모두 골고루 알고 있어야한다.</p><p>공부하다보면 <code>Node</code> 클래스와 <code>Element</code> 클래스에서 비슷한 일을 수행하는 메서드들이 존재한다.</p><p>두 메서드의 표면적인 차이점을 느낄 수 없는 경우엔 <code>Element</code>에서 정의한 메서드를 사용하라.</p><p>분명히 자식 클래스인 <code>Element</code> 클래스에서 새롭게 정의한 이유가 있을 것이다. (보통 더 유려하거나 편리하다.)</p><h3 id="document-createElement-Element"><a href="#document-createElement-Element" class="headerlink" title="document.createElement() - Element"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement">document.createElement()</a> - Element</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="built_in">document</span>.createElement(tagName[, options]); <span class="comment">// HTML**Element</span></span><br></pre></td></tr></table></figure><h3 id="document-createTextNode-Text"><a href="#document-createTextNode-Text" class="headerlink" title="document.createTextNode() - Text"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode">document.createTextNode()</a> - Text</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(data); <span class="comment">// Text</span></span><br></pre></td></tr></table></figure><h3 id="document-createAttribute-Attr"><a href="#document-createAttribute-Attr" class="headerlink" title="document.createAttribute() - Attr"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute">document.createAttribute()</a> - Attr</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attribute = <span class="built_in">document</span>.createAttribute(name)</span><br></pre></td></tr></table></figure><h2 id="Element-탐색"><a href="#Element-탐색" class="headerlink" title="Element 탐색"></a>Element 탐색</h2><hr><p>querySelector는 selector 문법을 이용해 상세 검색이 가능하다. (고급 기술)</p><p>단순 id, class, tagName으로 검색한다면 getElementBy{Id | ClassName | TagName}을 이용하자.</p><h3 id="document-querySelector-Element-null"><a href="#document-querySelector-Element-null" class="headerlink" title="document.querySelector() - Element || null"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">document.querySelector()</a> - Element || null</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.querySelector(selectors);</span><br></pre></td></tr></table></figure><h3 id="document-querySelectorAll-NodeList"><a href="#document-querySelectorAll-NodeList" class="headerlink" title="document.querySelectorAll() - NodeList"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">document.querySelectorAll()</a> - NodeList</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elementList = parentNode.querySelectorAll(selectors);</span><br></pre></td></tr></table></figure><h3 id="document-getElementById-Element-null"><a href="#document-getElementById-Element-null" class="headerlink" title="document.getElementById() - Element || null"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById">document.getElementById()</a> - Element || null</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(id);</span><br></pre></td></tr></table></figure><h3 id="document-getElementsByClassName-HTMLCollection"><a href="#document-getElementsByClassName-HTMLCollection" class="headerlink" title="document.getElementsByClassName() - HTMLCollection"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName">document.getElementsByClassName()</a> - HTMLCollection</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = element.getElementsByClassName(names);</span><br></pre></td></tr></table></figure><h3 id="document-getElementsByTagName-HTMLCollection"><a href="#document-getElementsByTagName-HTMLCollection" class="headerlink" title="document.getElementsByTagName() - HTMLCollection"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName">document.getElementsByTagName()</a> - HTMLCollection</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(name);</span><br></pre></td></tr></table></figure><h2 id="Class-조작"><a href="#Class-조작" class="headerlink" title="Class 조작"></a>Class 조작</h2><hr><h3 id="element-classList-DOMTokenList"><a href="#element-classList-DOMTokenList" class="headerlink" title="element.classList - DOMTokenList"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">element.classList</a> - DOMTokenList</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.className = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// our starting state: &lt;div class=&quot;foo&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(div.outerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">// use the classList API to remove and add classes</span></span><br><span class="line">div.classList.remove(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">div.classList.add(<span class="string">&quot;anotherclass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;div class=&quot;anotherclass&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(div.outerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if visible is set remove it, otherwise add it</span></span><br><span class="line">div.classList.toggle(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add/remove visible, depending on test conditional, i less than 10</span></span><br><span class="line">div.classList.toggle(<span class="string">&quot;visible&quot;</span>, i &lt; <span class="number">10</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(div.classList.contains(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// add or remove multiple classes</span></span><br><span class="line">div.classList.add(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line">div.classList.remove(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add or remove multiple classes using spread syntax</span></span><br><span class="line"><span class="keyword">const</span> cls = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>];</span><br><span class="line">div.classList.add(...cls);</span><br><span class="line">div.classList.remove(...cls);</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace class &quot;foo&quot; with class &quot;bar&quot;</span></span><br><span class="line">div.classList.replace(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>classList</code>는 <code>DOMTokenList</code>(유사 배열 객체)이며 class의 목록과 이를 수정하기 위한 모든 메서드를 지원한다.</p><h2 id="Attribute-조작"><a href="#Attribute-조작" class="headerlink" title="Attribute 조작"></a>Attribute 조작</h2><hr><h3 id="element-attributes-NamedNodeMap"><a href="#element-attributes-NamedNodeMap" class="headerlink" title="element.attributes - NamedNodeMap"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes">element.attributes</a> - NamedNodeMap</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attrs = element.attributes;</span><br><span class="line"></span><br><span class="line">attrs[<span class="number">0</span>] <span class="comment">// index 방식</span></span><br><span class="line">attrs[<span class="string">&#x27;src&#x27;</span>] <span class="comment">// key 방식</span></span><br></pre></td></tr></table></figure><p><code>attributes</code>는 해시맵 형태의 <code>NameNodeMap</code> 객체이다.</p><p>orderedHashMap이기 때문에 index, key 두가지 방식으로 모두 접근 가능하다.</p><h3 id="element-getAttribute-string"><a href="#element-getAttribute-string" class="headerlink" title="element.getAttribute() - string"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute">element.getAttribute()</a> - string</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attrval = element.getAttribute(attributeName);</span><br></pre></td></tr></table></figure><p><code>element</code> attribute의 값을 반환한다.</p><h3 id="element-setAttribute-string"><a href="#element-setAttribute-string" class="headerlink" title="element.setAttribute() - string"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute">element.setAttribute()</a> - string</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = element.setAttribute(name, value);</span><br></pre></td></tr></table></figure><p><code>element</code>의 attribute의 값을 설정한다.</p><h3 id="element-getAttributeNames-string"><a href="#element-getAttributeNames-string" class="headerlink" title="element.getAttributeNames() - string[]"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames">element.getAttributeNames()</a> - string[]</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attributeNames = element.getAttributeNames();</span><br></pre></td></tr></table></figure><p><code>element</code>의 attribute 이름 배열을 반환한다.</p><h3 id="element-removeAttribute"><a href="#element-removeAttribute" class="headerlink" title="element.removeAttribute()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute">element.removeAttribute()</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.removeAttribute(attrName);</span><br></pre></td></tr></table></figure><p><code>element</code>의 attribute를 삭제한다.</p><h2 id="Element-조작"><a href="#Element-조작" class="headerlink" title="Element 조작"></a>Element 조작</h2><hr><blockquote><p>element.innerHTML, element.outerHTML은 읽기 전용으로만 사용하길 권장</p></blockquote><h3 id="element-insert-something"><a href="#element-insert-something" class="headerlink" title="element.insert{something}()"></a>element.insert{something}()</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement">insertAdjacentElement()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML">insertAdjacentHTML()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText">insertAdjacentText()</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">element.insertAdjacentHTML(where, data);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &#x27;beforebegin&#x27;: Before the element itself.</span></span><br><span class="line"><span class="comment">* &#x27;afterbegin&#x27;: Just inside the element, before its first child.</span></span><br><span class="line"><span class="comment">* &#x27;beforeend&#x27;: Just inside the element, after its last child. </span></span><br><span class="line"><span class="comment">* &#x27;afterend&#x27;: After the element itself.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>HTML을 삽입하는게 아니라면 insertAdjacent 대신 <code>element.append()</code>, <code>element.prepend()</code>, <code>element.after()</code>, <code>element.before()</code>를 사용해도 동등하다.</p><h3 id="element-remove"><a href="#element-remove" class="headerlink" title="element.remove()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/remove">element.remove()</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.remove()</span><br></pre></td></tr></table></figure><p>DOM Tree에서 <code>element</code>를 제거하고 완전히 소멸시켜버린다.</p><h3 id="element-replaceWith"><a href="#element-replaceWith" class="headerlink" title="element.replaceWith()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith">element.replaceWith()</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.replaceWith(...nodes)</span><br></pre></td></tr></table></figure><p><code>element</code>자체의 레퍼런스를 완전히 다른 노드로 변경시킨다.</p><h3 id="element-children-HTMLCollection"><a href="#element-children-HTMLCollection" class="headerlink" title="element.children - HTMLCollection"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/children">element.children</a> - HTMLCollection</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">children = element.children</span><br></pre></td></tr></table></figure><p><code>element</code>의 자식들을 반환한다. 이때 타입은 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection">HTMLCollection</a>(유사 배열 객체)이다.</p><ul><li>첫번째 자식 element: <code>element.firstElementChild</code></li><li>마지막 자식 element: <code>element.lastElementChild</code></li></ul><h3 id="element-replaceChildren"><a href="#element-replaceChildren" class="headerlink" title="element.replaceChildren()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren">element.replaceChildren()</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.replaceChildren(...nodesOrDOMStrings)</span><br></pre></td></tr></table></figure><p><code>element</code>의 자식들이 완전히 교체 된다.</p><h3 id="element-childrenCount-number"><a href="#element-childrenCount-number" class="headerlink" title="element.childrenCount - number"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren">element.childrenCount</a> - number</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.childElementCount</span><br></pre></td></tr></table></figure><p><code>element</code>의 자식들의 수를 반환한다.</p><h3 id="element-nextElementSibling-Element"><a href="#element-nextElementSibling-Element" class="headerlink" title="element.nextElementSibling - Element"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling">element.nextElementSibling</a> - Element</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div-01&#x27;</span>).nextElementSibling;</span><br><span class="line"><span class="keyword">while</span> (el) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el.nodeName);</span><br><span class="line">  el = el.nextElementSibling;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>같은 계층에 존재하는 element를 순회한다. 반대 방향으로는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling"><code>element.previousElementSibling()</code></a>을 사용하면 된다.</p><p>만약 Element가 아닌 NodeList를 탐방하고 싶다면 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling">node.nextSibling()</a>`을 사용하라.</p><h3 id="element-animate"><a href="#element-animate" class="headerlink" title="element.animate()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate">element.animate()</a></h3><p>애니메이션 관련 CSS를 함께 학습해야한다. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate">이 링크</a>를 참고하라.</p><h2 id="노드-Node-조작"><a href="#노드-Node-조작" class="headerlink" title="노드(Node) 조작"></a>노드(Node) 조작</h2><hr><h3 id="비고"><a href="#비고" class="headerlink" title="비고"></a>비고</h3><blockquote><p>Element 클래스에서 비슷하게 할 수 있는 작업은 제외함</p></blockquote><h3 id="node-contains-boolean"><a href="#node-contains-boolean" class="headerlink" title="node.contains() - boolean"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/contains">node.contains()</a> - boolean</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.contains(otherNode)</span><br></pre></td></tr></table></figure><p><code>otherNode</code>가 <code>node</code>의 자식인지 평가한다.</p><h3 id="node-removeChild-Node"><a href="#node-removeChild-Node" class="headerlink" title="node.removeChild() - Node"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild">node.removeChild()</a> - Node</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child = node.removeChild(child);</span><br></pre></td></tr></table></figure><p><code>node</code>에서 <code>child</code>를 삭제한다. 이때 삭제된 <code>child</code> 노드가 반환된다.</p><h3 id="node-replaceChild-Node"><a href="#node-replaceChild-Node" class="headerlink" title="node.replaceChild() - Node"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild">node.replaceChild()</a> - Node</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oldChild = node.replaceChild(newChild, oldChild);</span><br></pre></td></tr></table></figure><p><code>node</code>의 자식 중에 <code>oldChild</code>를 <code>newChild</code>로 교체한다. 이때 교체된 <code>oldChild</code>가 반환된다.</p><h3 id="node-nodeName-string"><a href="#node-nodeName-string" class="headerlink" title="node.nodeName - string"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName">node.nodeName</a> - string</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.nodeName</span><br></pre></td></tr></table></figure><p><code>node</code>의 이름을 반환한다. 비슷한 프로퍼티로 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType">node.NodeType</a>`이 존재하는데 integer를 반환한다.</p><h3 id="node-parentElement-Element"><a href="#node-parentElement-Element" class="headerlink" title="node.parentElement - Element"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement">node.parentElement</a> - Element</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.parentElement</span><br></pre></td></tr></table></figure><p><code>node</code>의 <code>parentElement</code>에 접근한다. 비슷한 프로퍼티로 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode">node.parentNode</a><code>는</code>Node` 타입을 반환한다.</p><h3 id="node-textContent-string"><a href="#node-textContent-string" class="headerlink" title="node.textContent - string"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent">node.textContent</a> - string</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.textContent = <span class="string">&#x27;replace&#x27;</span></span><br></pre></td></tr></table></figure><p><code>node</code>의 textContent를 반환한다. 내용을 업데이트 하는 용도로 사용할 시 <code>innerText</code>보다 빠르다고 알려져 있다.</p><h2 id="HTMLElement-조작"><a href="#HTMLElement-조작" class="headerlink" title="HTMLElement 조작"></a>HTMLElement 조작</h2><hr><h3 id="element-focus"><a href="#element-focus" class="headerlink" title="element.focus()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus">element.focus()</a></h3><p>호출한 <code>element</code>를 포커싱 한다. 일부 이벤트는 포커싱 이후에 발생한다.</p><p>코딩 테스트에서는 주로 <code>HTMLInputElement</code>에 대한 포커싱을 요구한다.</p><h3 id="element-blur"><a href="#element-blur" class="headerlink" title="element.blur()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur">element.blur()</a></h3><p>호출한 <code>element</code>를 포커싱 해제한다.</p><h3 id="element-click"><a href="#element-click" class="headerlink" title="element.click()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click">element.click()</a></h3><p>호출한 <code>element</code>를 클릭한다. 버튼, 앵커의 경우 별도의 이벤트를 설정하지 않았다면 기본 동작이 실행된다.</p><h3 id="element-style"><a href="#element-style" class="headerlink" title="element.style"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">element.style</a></h3><p><code>element</code>의 CSS 스타일을 설정하는 property이다.</p><p>주의할점은 CSS는 보통 <code>kebab-case</code>를 사용하지만 JS style은 <code>lowerCamelCase</code>를 사용한다.</p><h2 id="그-외에-API들"><a href="#그-외에-API들" class="headerlink" title="그 외에 API들"></a>그 외에 API들</h2><hr><p>실제 코딩 테스트에서 유용한 메서드들 위주로 소개하였다.</p><p>허나 실제로 잘 사용하지 않더라도 많이 알고 있으면 나쁠게 없다.</p><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Node">Node</a>, <a href="https://developer.mozilla.org/ko/docs/Web/API/Element">Element</a>, <a href="https://developer.mozilla.org/ko/docs/Web/API/HTMLElement">HTMLElement</a> 문서를 한번씩 읽어보자.</p><h2 id="Event-조작"><a href="#Event-조작" class="headerlink" title="Event 조작"></a>Event 조작</h2><hr><h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;DOM fully loaded and parsed&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>DOM이 안벽하게 로딩되었을때 발생하는 이벤트이다.</p><h3 id="EventTarget-addEventListener"><a href="#EventTarget-addEventListener" class="headerlink" title="EventTarget.addEventListener()"></a><a href="https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener">EventTarget.<strong>addEventListener</strong>()</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.addEventListener(type, listener);</span><br><span class="line">eventTarget.addEventListener(type, listener, options);</span><br><span class="line">eventTarget.addEventListener(type, listener, useCapture);</span><br></pre></td></tr></table></figure><p>이벤트를 수신하는 리스너를 추가할 수 있다.</p><p>이벤트 버블링과 캡처는 <a href="https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/">이 글</a>을 읽어보길 추천한다.</p><ul><li>주요 이벤트 (<a href="https://developer.mozilla.org/ko/docs/Web/Events">이벤트 목록</a>)<ul><li>load (리소스가 로딩 되었을 때 - img 태그 등에서)</li><li>focus (엘리먼트가 포커싱 인 되었을 때)</li><li>blur (엘리먼트가 포커싱 아웃 되었을 때)</li><li>submit (폼이 제출 되었을 때)</li><li>reset (폼이 초기화 되었을 때)</li><li>resize (다큐먼트 뷰가 리사이즈 되었을 때)</li><li>scroll (엘리먼트가 스크롤 되었을 때)</li><li>select (선택 가능한 영역에서 무엇인가 선택되었을 때)</li><li>copy / cut (선택 가능한 영역에서 무엇인가 복사, 잘라내기 되었을 때)</li><li>paste (수정 가능한 영역에서 무엇인가 붙여넣기 되었을 때)</li><li>keydown / keyup / keypress (키가 눌렸을 때)</li><li>mouseenter / mouseover / mousemove / mousedown / mouseup / mouseleave / mouseout (마우스 관련)</li><li>click / dbclick / contextmenu (엘리먼트가 클릭 되었을 때 / 더블 클릭 / 오른쪽 클릭)</li><li>drag / dragstart / dragend / dragenter / dragover / dragleave / drop (드래그&amp;드롭 관련)</li><li>touchstart / touchend / touchmove / touchcancel (터치 관련)</li></ul></li></ul><h3 id="EventTarget-removeEventListener"><a href="#EventTarget-removeEventListener" class="headerlink" title="EventTarget.removeEventListener()"></a><a href="https://developer.mozilla.org/ko/docs/Web/API/EventTarget/removeEventListener">EventTarget.<strong>removeEventListener()</strong></a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.removeEventListener(type, listener);</span><br><span class="line">eventTarget.removeEventListener(type, listener, options);</span><br><span class="line">eventTarget.removeEventListener(type, listener, useCapture);</span><br></pre></td></tr></table></figure><p>이벤트를 삭제한다.</p><h3 id="EventTarget-dispatchEvent"><a href="#EventTarget-dispatchEvent" class="headerlink" title="EventTarget.dispatchEvent()"></a><a href="https://developer.mozilla.org/ko/docs/Web/API/EventTarget/dispatchEvent">EventTarget.<strong>dispatchEvent()</strong></a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.dispatchEvent(event)</span><br></pre></td></tr></table></figure><p>이벤트를 스크립트로 발생 시킬 수 있는 방법이다.</p><h2 id="Scroll-조작"><a href="#Scroll-조작" class="headerlink" title="Scroll 조작"></a>Scroll 조작</h2><hr><h3 id="스크롤-동작을-이해하기-전에-보면-좋은-문서"><a href="#스크롤-동작을-이해하기-전에-보면-좋은-문서" class="headerlink" title="스크롤 동작을 이해하기 전에 보면 좋은 문서"></a>스크롤 동작을 이해하기 전에 보면 좋은 문서</h3><ul><li>element 영역 관련 프로퍼티<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth">clientWidth</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight">clientHeight</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft">clientLeft</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop">clientTop</a></li></ul></li><li>element 영역 관련 메서드<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects">getClientRects()</a></li></ul></li></ul><h3 id="스크롤-프로퍼티"><a href="#스크롤-프로퍼티" class="headerlink" title="스크롤 프로퍼티"></a>스크롤 프로퍼티</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth">scrollWidth</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight">scrollHeight</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft">scrollLeft</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop">scrollTop</a></li></ul><h3 id="스크롤-메서드"><a href="#스크롤-메서드" class="headerlink" title="스크롤 메서드"></a>스크롤 메서드</h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll">scroll()</a> == <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo">scrollTo()</a> - 엘리먼트의 절대적 위치를 기준으로 스크롤 발생</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy">scrollBy()</a> - 엘리먼트의 상대적 위치를 기준으로 스크롤 발생</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView">scrollIntoView()</a> - 엘리먼트가 속한 뷰를 기준으로 스크롤 발생</li></ul><h3 id="스크롤-제어-overflow"><a href="#스크롤-제어-overflow" class="headerlink" title="스크롤 제어 (overflow)"></a>스크롤 제어 (<a href="https://developer.mozilla.org/ko/docs/Web/CSS/overflow">overflow</a>)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.someting</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>: visible | hidden | scroll | auto;</span><br><span class="line"><span class="attribute">overflow-x</span>: visible | hidden | scroll | auto;</span><br><span class="line"><span class="attribute">overflow-y</span>: visible | hidden | scroll | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visible</code>은 기본 값으로 컨테이너의 최대 길이를 초과해도 스크롤 하지 않고 그냥 보여준다.</p><p><code>hidden</code>은 컨테이너의 최대 길이를 초과한 영역은 보여주지 않는다. (스크롤 되지 않음)</p><p><code>scroll</code>은 컨테이너의 최대 길이를 초과한 것과 상관 없이 스크롤바를 항상 보여준다.</p><p><code>auto</code>는 컨테이너의 최대 길이를 초과했을 때만 스크롤바를 보여준다.</p><p><code>x</code>와 <code>y</code>는 횡 스크롤, 종 스크롤을 의미한다.</p><h3 id="스크롤-맨-위-아래로-옮기기"><a href="#스크롤-맨-위-아래로-옮기기" class="headerlink" title="스크롤 맨 위, 아래로 옮기기"></a>스크롤 맨 위, 아래로 옮기기</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.scrollTop = <span class="number">0</span> <span class="comment">// 맨 위로</span></span><br><span class="line">element.scrollTop = element.scrollHeight <span class="comment">// 맨 아래로</span></span><br></pre></td></tr></table></figure><p>채팅창 구현(메신저 개발)이 과제로 나온다면 반드시 필요한 스킬이다.</p><h2 id="기타-디자인-요소"><a href="#기타-디자인-요소" class="headerlink" title="기타 디자인 요소"></a>기타 디자인 요소</h2><hr><h3 id="DotDotDot-처리-Elipsis"><a href="#DotDotDot-처리-Elipsis" class="headerlink" title="DotDotDot 처리 (Elipsis)"></a>DotDotDot 처리 (Elipsis)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.elipsis</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: [width];</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>width</code> 값을 넘어가는 텍스트에 대하여 ・・・ 처리를 한다.</p><h3 id="여러줄-Elipsis"><a href="#여러줄-Elipsis" class="headerlink" title="여러줄 Elipsis"></a>여러줄 Elipsis</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.elipsis-multiline</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: [num-line];</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">word-wrap</span>:break-word; </span><br><span class="line">    <span class="attribute">height</span>: [height];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>지정한 <code>-webkit-line-clamp</code> 만큼 텍스트를 출력하고 넘어가는 텍스트에 대해서는 ・・・ 처리를 한다.</p><p>이 때 height를 적절하게 설정해줘야 정상적으로 표시된다.</p><p>라인 수를 동적으로 지정하고 싶으면 css 팩토리 함수를 만들면 된다.</p><h3 id="Image-LazyLoad"><a href="#Image-LazyLoad" class="headerlink" title="Image LazyLoad"></a>Image LazyLoad</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>사용자 경험을 높이기 위해 lazy-loading을 요구할 수 있다.</p><p>주로 이미지 로딩에 대하여 이 기능을 요구하는데 <code>loading=&quot;lazy&quot;</code>라는 간단한 속성으로 구현할 수 있다.</p><p>저 태그가 있다고 무조건 lazy loading을 하는 것은 아니다.</p><p>브라우저마다 다르겠지만 만약 이전에 불러온적이 있다면 색인을 해뒀다 불러오는게 더 빠르다.</p><p>만약 lazy loading을 다시 보고 싶다면, Hard Reload(shfit+cntl/cmd+r)를 하라. (색인을 초기화 한다.)</p><p>또한, <code>loading=&quot;lazy&quot;</code>만 한다고 언제나 능사는 아니니, 각 상황별로 대처하기 위해 아래 문서를 읽어보길 바란다.</p><p><a href="https://helloinyong.tistory.com/297">웹 성능 최적화를 위한 Image Lazy Loading 기법</a></p><h3 id="Image-Scroll-Loading"><a href="#Image-Scroll-Loading" class="headerlink" title="Image Scroll Loading"></a>Image Scroll Loading</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (evt.target.scrollHeight - evt.target.scrollTop === evt.target.clientHeight) &#123;</span><br><span class="line">    <span class="comment">// ... api 요청</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>scroll이 최대로 내려왔을 때 새로운 Request를 보내는 방법이다.</p><p><code>&lt;img loading=&quot;lazy&quot;&gt;</code>와 함께 사용하면 시너지가 좋다.</p><h3 id="W3Schools-HowTo"><a href="#W3Schools-HowTo" class="headerlink" title="W3Schools HowTo"></a>W3Schools HowTo</h3><p>W3Schools의 <a href="https://www.w3schools.com/howto/default.asp">HowTo</a> 항목에는 CSS와 VanillaJS를 조합하여 다양한 디자인 컴포넌트를 만드는 방법을 소개한다.</p><img src="https://i.ibb.co/sHM83FZ/2022-03-10-5-48-56.png" alt="image overlay" width="200px" loading="lazy"/><img src="https://i.ibb.co/2v9Nx7F/2022-03-10-5-51-13.png" alt="image slide" width="400px" loading="lazy"/><h3 id="반응형-미디어-쿼리"><a href="#반응형-미디어-쿼리" class="headerlink" title="반응형 미디어 쿼리"></a>반응형 미디어 쿼리</h3><p>기본 문법은 <code>@media [media-type] and ([media-type-rule]) and ...</code> 이다.</p><p>반응형 웹을 위해 필수로 미디어 쿼리에 대해 학습할 필요가 있다. <a href="https://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Media_queries">미디어 쿼리 학습</a></p><ul><li>논리곱 (and) 예시</li></ul><p><code>@media screen and (min-width: 400px) and (orientation: landscape)</code></p><p>→ 화면의 최소 폭이 400px이고 회전방향이 landscape일 경우</p><ul><li>논리합 (,) 예시</li></ul><p><code>@media screen and (min-width: 400px), screen and (orientation: landscape)</code></p><p>→ 화면의 최소 폭이 400px이거나 회전방향이 landscape일 경우</p><h3 id="다크-모드-Dark-Mode"><a href="#다크-모드-Dark-Mode" class="headerlink" title="다크 모드 (Dark Mode)"></a>다크 모드 (Dark Mode)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;&#125;</span><br></pre></td></tr></table></figure><p>시험 전에 PC를 미리 다크모드로 설정해두면 확인하기 편리하다.</p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr><p><a href="https://developer.mozilla.org/en-US/">MDN</a><br><a href="https://www.w3schools.com/">W3Schools</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/JavaScript/">JavaScript</category>
      
      
      <category domain="https://jehwanyoo.net/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://jehwanyoo.net/tags/DOM-API/">DOM API</category>
      
      <category domain="https://jehwanyoo.net/tags/Coding-Test/">Coding Test</category>
      
      <category domain="https://jehwanyoo.net/tags/ESM/">ESM</category>
      
      <category domain="https://jehwanyoo.net/tags/Fetch-API/">Fetch API</category>
      
      <category domain="https://jehwanyoo.net/tags/Event/">Event</category>
      
      <category domain="https://jehwanyoo.net/tags/Scroll/">Scroll</category>
      
      <category domain="https://jehwanyoo.net/tags/Elipsis/">Elipsis</category>
      
      <category domain="https://jehwanyoo.net/tags/Lazy-Load/">Lazy Load</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/07/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%95%84%EC%88%98-API-%EC%B4%9D-%EC%A0%95%EB%A6%AC-1-0-ESM-Fetch-DOM-API/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신 러닝을 해보자 6장 - 텐서플로우 기초</title>
      <link>https://jehwanyoo.net/2022/03/06/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-6%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0-%EA%B8%B0%EC%B4%88/</link>
      <guid>https://jehwanyoo.net/2022/03/06/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-6%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0-%EA%B8%B0%EC%B4%88/</guid>
      <pubDate>Sun, 06 Mar 2022 08:00:27 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;텐서란-Tensor&quot;&gt;&lt;a href=&quot;#텐서란-Tensor&quot; class=&quot;headerlink&quot; title=&quot;텐서란? (Tensor)&quot;&gt;&lt;/a&gt;텐서란? (Tensor)&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;선형대수학에서 사용하는 수학적 대상을 텐서(Ten</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="텐서란-Tensor"><a href="#텐서란-Tensor" class="headerlink" title="텐서란? (Tensor)"></a>텐서란? (Tensor)</h2><hr><p>선형대수학에서 사용하는 수학적 대상을 텐서(Tensor)라고 한다.</p><p>스칼라, 벡터, 행렬, n-차원 배열등을 일반화(Generalization)한 개념이다.</p><p>19세기 미분 기하학에서 처음 도입하였으며, 물리학, 공학을 비롯한 다양한 학문에서 이용된다.</p><h2 id="랭크-Rank"><a href="#랭크-Rank" class="headerlink" title="랭크 (Rank)"></a>랭크 (Rank)</h2><hr><p>텐서에는 Rank라는 개념이 존재하며 텐서의 차원 수를 의미한다.</p><p>Rank를 Order라고도 한다.</p><p>낮은 Rank부터 연산이 정의되어 더 높은 Rank로 확장되기 때문이다.</p><table><thead><tr><th align="center">Rank</th><th align="center">데이터 타입</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">스칼라 (0-order-tensor)</td></tr><tr><td align="center">1</td><td align="center">벡터 (1-order-tensor)</td></tr><tr><td align="center">2</td><td align="center">행렬 (2-order-tensor)</td></tr><tr><td align="center">3</td><td align="center">(3-order-tensor)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">n</td><td align="center">(n-order-tensor)</td></tr></tbody></table><h2 id="Tensor-예제"><a href="#Tensor-예제" class="headerlink" title="Tensor 예제"></a>Tensor 예제</h2><hr><p>Tensor를 실험하기 위해 머신 러닝 프레임워크인 Tensorflow를 사용해보자.</p><p>아래는 Tensorflow + Keras로 Linear Function을 표현하였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense </span><br><span class="line"></span><br><span class="line">x = tf.constant([[<span class="number">10.</span>, <span class="number">20.</span>], [<span class="number">30.</span>, <span class="number">40.</span>], [<span class="number">50.</span>, <span class="number">60.</span>]])</span><br><span class="line"></span><br><span class="line">dense = Dense(units = <span class="number">1</span>) <span class="comment"># Linear Function</span></span><br><span class="line"></span><br><span class="line">y = dense(x) <span class="comment"># Initialize W &amp; Feed Forward</span></span><br><span class="line">W, b = dense.get_weights()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y = x﹒<span class="subst">&#123;W&#125;</span> + <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x.shape: <span class="subst">&#123;x.shape&#125;</span> W.shape: <span class="subst">&#123;W.shape&#125;</span> B.shape: <span class="subst">&#123;b.shape&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y = x﹒[[0.08496201]</span><br><span class="line"> [0.19183493]] + [0.]</span><br><span class="line">x.shape: (3, 2) W.shape: (2, 1) B.shape: (1,)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[ 4.6863184]</span><br><span class="line"> [10.222258 ]</span><br><span class="line"> [15.758196 ]], shape=(3, 1), dtype=float32)</span><br></pre></td></tr></table></figure><img src="https://i.ibb.co/x6ZrrWg/6-2022-002.jpg" alt="https://i.ibb.co/x6ZrrWg/6-2022-002.jpg" width="600"><p>머신 러닝에 등장하는 x(입력), W(가중치), b(바이어스) 모두 행렬 또는 벡터의 연산이며,</p><p>다시 말해 텐서의 연산이라고 볼 수 있다.</p><h2 id="상수-텐서-선언"><a href="#상수-텐서-선언" class="headerlink" title="상수 텐서 선언"></a>상수 텐서 선언</h2><hr><p>상수 텐서는 <code>tf.constant</code> 함수로 선언할 수 있다.</p><p>상수 텐서는 연산을 진행하는 동안 ‘텐서 객체의 값’이 변하지 않는다.</p><blockquote><p>a = tf.constant(10)을 생각해보자.</p><p>여기서 바뀌지 않는 것은 tf.Tensor 객체이다. a는 지역 변수이므로 바뀔 수 있다.</p><p>a가 tf.Tensor가 되는게 아니라 a는 레퍼런스 변수로써 tf.Tensor를 가리키고 있는 것이다. (포인터 개념)</p><p>좀 더 자세히 알고 싶다면 포인터를 직접 사용하는 C언어나 C++ 언어를 접해보길 권장한다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># RANK-0</span></span><br><span class="line">a = tf.constant(<span class="number">10.</span>)</span><br><span class="line">b = tf.constant(-<span class="number">5.</span>)</span><br><span class="line">c = a + b</span><br><span class="line">d = a * b</span><br><span class="line">e = a - b</span><br><span class="line">f = a / b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rank-0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>, d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span>, f)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># RANK-1</span></span><br><span class="line">a = tf.constant([<span class="number">5.</span>, -<span class="number">4.</span>])</span><br><span class="line">b = tf.constant([-<span class="number">2.</span>, -<span class="number">3.</span>])</span><br><span class="line">c = a + b</span><br><span class="line">d = a * b</span><br><span class="line">e = a - b</span><br><span class="line">f = a / b</span><br><span class="line">g = tf.tensordot(a, b, axes=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rank-1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>, d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span>, f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g&#x27;</span>, g)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># RANK-2</span></span><br><span class="line">a = tf.constant([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">5.</span>, <span class="number">6.</span>], [<span class="number">7.</span>, <span class="number">8.</span>]])</span><br><span class="line">c = a + b</span><br><span class="line">d = a * b <span class="comment"># 아다마르 프로덕트</span></span><br><span class="line">e = a - b</span><br><span class="line">f = a / b</span><br><span class="line">g = tf.linalg.matmul(a, b) <span class="comment"># 도트 프로덕트</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rank-2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>, d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span>, f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g&#x27;</span>, g)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">rank-0</span><br><span class="line">a tf.Tensor(10.0, shape=(), dtype=float32)</span><br><span class="line">b tf.Tensor(-5.0, shape=(), dtype=float32)</span><br><span class="line">c tf.Tensor(5.0, shape=(), dtype=float32)</span><br><span class="line">d tf.Tensor(-50.0, shape=(), dtype=float32)</span><br><span class="line">e tf.Tensor(15.0, shape=(), dtype=float32)</span><br><span class="line">f tf.Tensor(-2.0, shape=(), dtype=float32)</span><br><span class="line"></span><br><span class="line">rank-1</span><br><span class="line">a tf.Tensor([ 5. -4.], shape=(2,), dtype=float32)</span><br><span class="line">b tf.Tensor([-2. -3.], shape=(2,), dtype=float32)</span><br><span class="line">c tf.Tensor([ 3. -7.], shape=(2,), dtype=float32)</span><br><span class="line">d tf.Tensor([-10.  12.], shape=(2,), dtype=float32)</span><br><span class="line">e tf.Tensor([ 7. -1.], shape=(2,), dtype=float32)</span><br><span class="line">f tf.Tensor([-2.5        1.3333334], shape=(2,), dtype=float32)</span><br><span class="line">g tf.Tensor(2.0, shape=(), dtype=float32)</span><br><span class="line"></span><br><span class="line">rank-2</span><br><span class="line">a tf.Tensor(</span><br><span class="line">[[1. 2.]</span><br><span class="line"> [3. 4.]], shape=(2, 2), dtype=float32)</span><br><span class="line">b tf.Tensor(</span><br><span class="line">[[5. 6.]</span><br><span class="line"> [7. 8.]], shape=(2, 2), dtype=float32)</span><br><span class="line">c tf.Tensor(</span><br><span class="line">[[ 6.  8.]</span><br><span class="line"> [10. 12.]], shape=(2, 2), dtype=float32)</span><br><span class="line">d tf.Tensor(</span><br><span class="line">[[ 5. 12.]</span><br><span class="line"> [21. 32.]], shape=(2, 2), dtype=float32)</span><br><span class="line">e tf.Tensor(</span><br><span class="line">[[-4. -4.]</span><br><span class="line"> [-4. -4.]], shape=(2, 2), dtype=float32)</span><br><span class="line">f tf.Tensor(</span><br><span class="line">[[0.2        0.33333334]</span><br><span class="line"> [0.42857143 0.5       ]], shape=(2, 2), dtype=float32)</span><br><span class="line">g tf.Tensor(</span><br><span class="line">[[19. 22.]</span><br><span class="line"> [43. 50.]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure><p>Tensorflow의 Tensor는 numpy 호환 배열과, <code>.shape</code>, <code>.dtype</code>을 가지고 있다.</p><p>Tensorflow 2.0부터 Session 방식을 사용하지 않기 떄문에, Tensor를 평가하기 위해 <code>.eval()</code> 대신 <code>.numpy()</code>를 사용한다.</p><h2 id="초기화-함수"><a href="#초기화-함수" class="headerlink" title="초기화 함수"></a>초기화 함수</h2><hr><p>초기화 함수를 이용하여 영백터, 영행렬, 단위행렬, 대각행렬, 난수텐서 등을 생성할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.zeros(<span class="number">2</span>) <span class="comment"># 2d O-vector</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">b = tf.ones((<span class="number">4</span>, <span class="number">4</span>)) <span class="comment"># 4x4 Matrix</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line">c = tf.eye(<span class="number">4</span>) <span class="comment"># 4x4 Identify Matrix</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line">d = tf.fill((<span class="number">3</span>, <span class="number">2</span>), value=<span class="number">5.</span>) <span class="comment"># 3x2 Matrix</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line">e = tf.linalg.diag(tf.<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>)) <span class="comment"># Diagonal Matrix</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line">f = tf.random.normal((<span class="number">2</span>, <span class="number">2</span>), mean=<span class="number">0</span>, stddev=<span class="number">1</span>) <span class="comment"># Normal Distribution</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f&#x27;</span>, f)</span><br><span class="line"></span><br><span class="line">g = tf.random.uniform((<span class="number">2</span>, <span class="number">2</span>), minval=-<span class="number">2</span>, maxval=<span class="number">2</span>) <span class="comment"># Uniform Distribution</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g&#x27;</span>, g)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a tf.Tensor([0. 0.], shape=(2,), dtype=float32)</span><br><span class="line">b tf.Tensor(</span><br><span class="line">[[1. 1. 1. 1.]</span><br><span class="line"> [1. 1. 1. 1.]</span><br><span class="line"> [1. 1. 1. 1.]</span><br><span class="line"> [1. 1. 1. 1.]], shape=(4, 4), dtype=float32)</span><br><span class="line">c tf.Tensor(</span><br><span class="line">[[1. 0. 0. 0.]</span><br><span class="line"> [0. 1. 0. 0.]</span><br><span class="line"> [0. 0. 1. 0.]</span><br><span class="line"> [0. 0. 0. 1.]], shape=(4, 4), dtype=float32)</span><br><span class="line">d tf.Tensor(</span><br><span class="line">[[5. 5.]</span><br><span class="line"> [5. 5.]</span><br><span class="line"> [5. 5.]], shape=(3, 2), dtype=float32)</span><br><span class="line">e tf.Tensor(</span><br><span class="line">[[1 0 0 0]</span><br><span class="line"> [0 2 0 0]</span><br><span class="line"> [0 0 3 0]</span><br><span class="line"> [0 0 0 4]], shape=(4, 4), dtype=int32)</span><br><span class="line">f tf.Tensor(</span><br><span class="line">[[ 0.26831564 -1.0274279 ]</span><br><span class="line"> [-0.26385054 -2.047377  ]], shape=(2, 2), dtype=float32)</span><br><span class="line">g tf.Tensor(</span><br><span class="line">[[-1.0781832   1.899333  ]</span><br><span class="line"> [-0.43762493 -1.9079366 ]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="텐서-형상-조작"><a href="#텐서-형상-조작" class="headerlink" title="텐서 형상 조작"></a>텐서 형상 조작</h2><hr><p><code>tf.reshape</code> 함수를 이용하면 다른 형상의 텐서로 바꿀수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a: <span class="subst">&#123;a&#125;</span>, a.shape: <span class="subst">&#123;a.shape&#125;</span>&#x27;</span>)</span><br><span class="line">b = tf.reshape(a, (<span class="number">6</span>, )) <span class="comment"># flatten</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b: <span class="subst">&#123;b&#125;</span>, b.shape: <span class="subst">&#123;b.shape&#125;</span>&#x27;</span>)</span><br><span class="line">c = tf.reshape(b, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c: <span class="subst">&#123;c&#125;</span>, c.shape: <span class="subst">&#123;c.shape&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a: [[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]], a.shape: (3, 2)</span><br><span class="line">b: [1 2 3 4 5 6], b.shape: (6,)</span><br><span class="line">c: [[1 2 3]</span><br><span class="line"> [4 5 6]], c.shape: (2, 3)</span><br></pre></td></tr></table></figure><h2 id="브로드캐스팅"><a href="#브로드캐스팅" class="headerlink" title="브로드캐스팅"></a>브로드캐스팅</h2><hr><p>브로드캐스팅은 numpy에서 도입된 개념으로 행렬과 서로 다른 크기의 벡터를 더할 때 쓰인다.</p><p>본래 선형대수에서 정의되지 않지만 벡터를 브로드캐스트(확산)하여 계산할 수 있는 형태로 만든 것이다.</p><img src="https://i.ibb.co/5YZ6Gsk/2022-03-03-1-37-24.png" alt="https://i.ibb.co/5YZ6Gsk/2022-03-03-1-37-24.png" width="500" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.ones((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">b = tf.ones(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a+b&#x27;</span>, a + b)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a tf.Tensor(</span><br><span class="line">[[1. 1.]</span><br><span class="line"> [1. 1.]], shape=(2, 2), dtype=float32)</span><br><span class="line">b tf.Tensor([1.], shape=(1,), dtype=float32)</span><br><span class="line">a+b tf.Tensor(</span><br><span class="line">[[2. 2.]</span><br><span class="line"> [2. 2.]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="텐서-변수"><a href="#텐서-변수" class="headerlink" title="텐서 변수"></a>텐서 변수</h2><hr><p><code>tf.Variable</code> 객체는 <code>tf.Tensor</code>를 담고있는 변수 역할을 하는 객체이다.</p><p><code>.assign()</code> 함수를 통해 다른 <code>tf.Tensor</code>로 배정할 수 있다.</p><blockquote><p>공학적인 측면에서 생각해보자.</p><p>a = a = tf.Variable(tf.constant([1., 2.]))의 경우 레퍼런스 구조가 a -&gt; tf.Variable -&gt; tf.Tensor 된다.</p><p>tf.Variable이 변수 처럼 동작하는 이유는 tf.Variable의 레퍼런스를 교체할 수 있기 때문이다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1.</span>, <span class="number">2.</span>])</span><br><span class="line">v_a = tf.Variable(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v_a)</span><br><span class="line"></span><br><span class="line">v_a.assign([<span class="number">3.</span>, <span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v_a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tf.Variable &#x27;Variable:0&#x27; shape=(2,) dtype=float32, numpy=array([1., 2.], dtype=float32)&gt;</span><br><span class="line">&lt;tf.Variable &#x27;Variable:0&#x27; shape=(2,) dtype=float32, numpy=array([3., 4.], dtype=float32)&gt;</span><br></pre></td></tr></table></figure><p>머신 러닝에서 업데이트 되는 가중치를 표현할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w_init = tf.transpose(tf.constant([[<span class="number">1.</span>, <span class="number">2.</span>]]))</span><br><span class="line">W = tf.Variable(w_init)</span><br><span class="line">x = tf.constant([[<span class="number">2.</span>, <span class="number">3.</span>]])</span><br><span class="line"></span><br><span class="line">y = tf.linalg.matmul(x, W)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">w_add = tf.constant([<span class="number">1.</span>])</span><br><span class="line">W.assign(W + w_add) <span class="comment"># 각 가중치 값에 +1</span></span><br><span class="line"></span><br><span class="line">y = tf.linalg.matmul(x, W)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[8.]], shape=(1, 1), dtype=float32)</span><br><span class="line">tf.Tensor([[13.]], shape=(1, 1), dtype=float32)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/AI/">AI</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Machine-Learning/">Machine Learning</category>
      
      <category domain="https://jehwanyoo.net/tags/AI/">AI</category>
      
      <category domain="https://jehwanyoo.net/tags/Deep-Learning/">Deep Learning</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/06/%EB%A8%B8%EC%8B%A0-%EB%9F%AC%EB%8B%9D%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90-6%EC%9E%A5-%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C%EC%9A%B0-%EA%B8%B0%EC%B4%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>배열 90도 회전 알고리즘 (시계, 반시계)</title>
      <link>https://jehwanyoo.net/2022/03/04/%EB%B0%B0%EC%97%B4-90%EB%8F%84-%ED%9A%8C%EC%A0%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8B%9C%EA%B3%84-%EB%B0%98%EC%8B%9C%EA%B3%84/</link>
      <guid>https://jehwanyoo.net/2022/03/04/%EB%B0%B0%EC%97%B4-90%EB%8F%84-%ED%9A%8C%EC%A0%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8B%9C%EA%B3%84-%EB%B0%98%EC%8B%9C%EA%B3%84/</guid>
      <pubDate>Fri, 04 Mar 2022 08:24:24 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate_matrix_90</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    시계 방향으로 회전</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    n = <span class="built_in">len</span>(a)</span><br><span class="line">    m = <span class="built_in">len</span>(a[<span class="number">0</span>])</span><br><span class="line">    result = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            result[j][n-i-<span class="number">1</span>] = a[i][j]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate_matrix_90_r</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    반시계 방향으로 회전</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    n = <span class="built_in">len</span>(a)</span><br><span class="line">    m = <span class="built_in">len</span>(a[<span class="number">0</span>])</span><br><span class="line">    result = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            result[n-j-<span class="number">1</span>][i] = a[i][j]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Algorithms/">Algorithms</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Algorithms/">Algorithms</category>
      
      <category domain="https://jehwanyoo.net/tags/ASeries/">ASeries</category>
      
      <category domain="https://jehwanyoo.net/tags/Rotate/">Rotate</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/04/%EB%B0%B0%EC%97%B4-90%EB%8F%84-%ED%9A%8C%EC%A0%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8B%9C%EA%B3%84-%EB%B0%98%EC%8B%9C%EA%B3%84/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
