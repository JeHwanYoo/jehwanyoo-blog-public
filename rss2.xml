<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JeHwan PL Note</title>
    <link>https://jehwanyoo.net/</link>
    
    <atom:link href="https://jehwanyoo.net/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프로그래밍 노트, 팁, 강의등을 게시하는 블로그입니다.</description>
    <pubDate>Tue, 05 Apr 2022 13:51:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>웹 프로그래밍 with Golang 4 - 라우팅</title>
      <link>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/</link>
      <guid>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/</guid>
      <pubDate>Tue, 05 Apr 2022 13:48:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스팅&quot;&gt;&lt;a href=&quot;#지난-포스팅&quot; class=&quot;headerlink&quot; title=&quot;지난 포스팅&quot;&gt;&lt;/a&gt;지난 포스팅&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스팅"><a href="#지난-포스팅" class="headerlink" title="지난 포스팅"></a>지난 포스팅</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/">웹 프로그래밍 with Golang 3 - 정적 파일</a></p><h2 id="라우팅-Routing"><a href="#라우팅-Routing" class="headerlink" title="라우팅 (Routing)"></a>라우팅 (Routing)</h2><hr><p>라우팅은 Restful API를 구축하기 위해 필수적인 기능이라고 할 수 있습니다.</p><p>라우트(route)는 사전적 의미로 <code>(특정한 루트를 따라 무엇을) 보내다[전송하다]</code>라는 의미를 가지고 있습니다.</p><p>즉, 라우팅은 사용자 요청이 들어왔을 때 해당 요청을 처리할 수 있는 서비스로 보내는 것을 의미합니다.</p><h2 id="라우터-패키지"><a href="#라우터-패키지" class="headerlink" title="라우터 패키지"></a>라우터 패키지</h2><hr><p>라우터를 만들기 위해서는 <code>http.ServeMux</code>를 사용하면 됩니다.</p><p>하지만 편리한 방법이 아니기 때문에 서드파티 패키지를 주로 사용합니다.</p><p>유명한 패키지로는</p><ul><li><a href="https://github.com/gin-gonic/gin">gin</a>  (Star: 57.2k)</li><li><a href="https://github.com/gorilla/mux">gorilla/mux</a> (Star: 16.3k)</li></ul><p>가 있습니다.</p><p><code>gin</code>은 Node.js의 <a href="https://expressjs.com/ko/">Express</a> 수준의 프레임워크로 내장 패키지인 <code>net/http</code>를 대체합니다.</p><p>반면에 <code>gorilla/mux</code>는 라우터 기능이 중점이며 <code>net/http</code> 모듈과 함께 사용됩니다.</p><p>라우팅에 대해 이해하기 위하여 이번 튜토리얼에서는 <code>gorilla/mux</code>를 사용하겠습니다.</p><p><code>gin</code>은 추후 챕터에서 다루겠습니다.</p><h2 id="Gorilla-Mux-설치"><a href="#Gorilla-Mux-설치" class="headerlink" title="Gorilla Mux 설치"></a>Gorilla Mux 설치</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gorilla/mux</span><br></pre></td></tr></table></figure><p><code>go get</code>으로 패키지를 설치합니다.</p><h2 id="라우터-코드"><a href="#라우터-코드" class="headerlink" title="라우터 코드"></a>라우터 코드</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;/page/&#123;page&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        vars := mux.Vars(r)</span><br><span class="line">        title := vars[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        page := vars[<span class="string">&quot;page&quot;</span>]</span><br><span class="line"></span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;You&#x27;ve requested the book: %s on page %s\n&quot;</span>, title, page)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>라우터는 기존에 알고있던 <code>http.HandleFunc</code>와 유사합니다.</p><p><code>mux.Vars</code> 메서드를 이용하여 URL의 Path Parameter를 가져올 수 있습니다.</p><p>이밖에도 정규식을 활용하여 다양한 형태의 URL을 파싱할 수 있습니다.</p><h2 id="라우터-테스트"><a href="#라우터-테스트" class="headerlink" title="라우터 테스트"></a>라우터 테스트</h2><hr><p>{title}과 {page}를 임의로 설정하여 요청을 보내겠습니다.</p><p><code>주소/books/Harry Poter/page/5</code></p><img src='https://i.ibb.co/NTvcHmP/image.png' width='600' alt='Parameter Path' /><h2 id="메서드-제한하기"><a href="#메서드-제한하기" class="headerlink" title="메서드 제한하기"></a>메서드 제한하기</h2><hr><p>별도로 메서드(Method)를 제한하지 않으면 패턴이 일치하는 모든 요청에 대해 응답할 것입니다.</p><p>Restful API에는 4가지의 메서드를 사용합니다. (GET, POST, DELETE, PATCH)</p><p>용도에 맞게 메서드를 다음과 같이 제한시킬 필요가 있습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, CreateBook).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, ReadBook).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, UpdateBook).Methods(<span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, DeleteBook).Methods(<span class="string">&quot;DELETE&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Restful API에 대한 이해가 부족하다면 <a href="https://jehwanyoo.net/2021/05/19/%EC%A2%8B%EC%9D%80-REST-API-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EC%B0%B0/">좋은 REST API 설계 방법에 대한 고찰</a>이라는 포스팅을 한번 보시길 바랍니다.</p></blockquote><p>다음 시간에는 구조화된 Data를 주고 받기 위해 Form Value &amp; JSON을 활용하는 법에 대해 배워보겠습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/routes-using-gorilla-mux/">https://gowebexamples.com/routes-using-gorilla-mux/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Routing/">Routing</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 3 - 정적 파일</title>
      <link>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/</link>
      <guid>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/</guid>
      <pubDate>Tue, 05 Apr 2022 12:55:33 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스팅&quot;&gt;&lt;a href=&quot;#지난-포스팅&quot; class=&quot;headerlink&quot; title=&quot;지난 포스팅&quot;&gt;&lt;/a&gt;지난 포스팅&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스팅"><a href="#지난-포스팅" class="headerlink" title="지난 포스팅"></a>지난 포스팅</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><h2 id="정적-파일-Static-File"><a href="#정적-파일-Static-File" class="headerlink" title="정적 파일 (Static File)"></a>정적 파일 (Static File)</h2><hr><p>정적 파일은 원본이 수정되지 않고 그대로 클라이언트에게 제공하는 파일을 의미합니다.</p><p>주로 <code>html, css, js</code>를 정적 파일로 사용합니다. 간단한 구조의 CSR 애플리케이션 이라면 정적 호스팅 서버만 있어도 상관 없습니다. (예) github pages</p><h2 id="디렉토리-구조"><a href="#디렉토리-구조" class="headerlink" title="디렉토리 구조"></a>디렉토리 구조</h2><hr><p><img src="https://i.ibb.co/QvJSWJm/image.png" alt="https://i.ibb.co/QvJSWJm/image.png"></p><p><code>assets</code> 디렉터리에 있는 파일들을 사용자에게 제공해보겠습니다.</p><p><code>assets</code> 디렉터리에 존재하지만, 사용자는 <code>/static</code>으로 리소스를 요청하게 만들겠습니다.</p><p>이처럼 실제 경로와는 다르게 리소스 위치를 설정할 수 있습니다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fs := http.<span class="built_in">FileServer</span>(http.<span class="built_in">Dir</span>(<span class="string">&quot;assets/&quot;</span>))</span><br><span class="line">  http.<span class="built_in">Handle</span>(<span class="string">&quot;/static/&quot;</span>, http.<span class="built_in">StripPrefix</span>(<span class="string">&quot;/static/&quot;</span>, fs))</span><br><span class="line"></span><br><span class="line">  http.<span class="built_in">ListenAndServe</span>(<span class="string">&quot;:8080&quot;</span>, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assets</code> 디렉토리를 읽어온 뒤 <code>http.FileServer</code> 메서드를 이용하여 정적 폴더로 지정합니다.</p><p><code>http.Handle</code> 메서드를 이용하여 <code>/static</code>으로 요청하는 경우에 fs에 접근하도록 설정합니다.</p><p>이때 <code>http.StripPrefix</code>를 반드시 해야하는데, 만약 그렇지 않으면<code>/static/assets/</code>에서 파일을 찾기 때문에 요청을 수행할 수 없습니다.</p><p><code>http.StripPrefix</code>를 수행한 하고나면 <code>/assets/*</code>에서 파일을 찾아 사용자에게 제공합니다.</p><img src='https://i.ibb.co/xYJSGyq/image.png' width='600' alt='index page' /><p><code>&#123;주소&#125;/static</code>에 접속해보면 index 페이지가 출력됩니다.</p><img src='https://i.ibb.co/5Ywqkf8/image.png' width='600' alt='memo1.txt' /><p><code>&#123;주소&#125;/static/memo1.txt</code>에 접속하면 작성한 텍스트 파일이 그대로 출력됩니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/static-files/">https://gowebexamples.com/static-files/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Static-File/">Static File</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 2 - 템플릿 문법</title>
      <link>https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/</link>
      <guid>https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/</guid>
      <pubDate>Sat, 02 Apr 2022 10:29:04 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스팅&quot;&gt;&lt;a href=&quot;#지난-포스팅&quot; class=&quot;headerlink&quot; title=&quot;지난 포스팅&quot;&gt;&lt;/a&gt;지난 포스팅&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스팅"><a href="#지난-포스팅" class="headerlink" title="지난 포스팅"></a>지난 포스팅</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><h2 id="1-템플릿이란"><a href="#1-템플릿이란" class="headerlink" title="1. 템플릿이란?"></a>1. 템플릿이란?</h2><hr><p>Go의 템플릿(Template)은 <a href="https://expressjs.com/ko/guide/using-template-engines.html">Express</a>의 템플릿 엔진과 비슷합니다.</p><p>보간 문법(Interpolation Syntax)를 이용하여 서버사이드 렌더링을 수행합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.PageTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;range .Todos&#125;&#125;</span><br><span class="line">        &#123;&#123;if .Done&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;done&quot;</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;else&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;end&#125;&#125;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>보간 문법은 중괄호(<code>&#123;&#125;</code>) 두개를 사용하며 구문(statement)의 끝에는 <code>&#123;&#123;end&#125;&#125;</code>가 사용됩니다.</p><h2 id="2-템플릿-작성"><a href="#2-템플릿-작성" class="headerlink" title="2. 템플릿 작성"></a>2. 템플릿 작성</h2><hr><h3 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Done  <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TodoPageData <span class="keyword">struct</span> &#123;</span><br><span class="line">    PageTitle <span class="keyword">string</span></span><br><span class="line">    Todos     []Todo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tmpl := template.Must(template.ParseFiles(<span class="string">&quot;layout.html&quot;</span>))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        data := TodoPageData&#123;</span><br><span class="line">            PageTitle: <span class="string">&quot;My TODO list&quot;</span>,</span><br><span class="line">            Todos: []Todo&#123;</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 1&quot;</span>, Done: <span class="literal">false</span>&#125;,</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 2&quot;</span>, Done: <span class="literal">true</span>&#125;,</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 3&quot;</span>, Done: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        tmpl.Execute(w, data)</span><br><span class="line">    &#125;)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>템플릿 문법을 사용하기 위해서는 <code>html/template</code> 패키지가 필요합니다.</p><p><code>template.ParseFiles(&quot;layout.html&quot;)</code>은 템플릿 문법이 포함된 html을 파싱합니다.</p><p><code>template.Must()</code>는 파싱된 html을 <code>(*Template, error)</code> 객체의 쌍으로 만들어주는 헬퍼입니다.</p><p>에러가 발생하지 않은 경우 <code>error</code>는 <code>nil</code> 값을 같습니다.</p><p><code>tmpl.Execute(w, data)</code>는 <code>data</code>를 이용하여 페이지를 렌더링하고 출력물을 writer에 씁니다.</p><h3 id="layout-html"><a href="#layout-html" class="headerlink" title="layout.html"></a>layout.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.PageTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;range .Todos&#125;&#125;</span><br><span class="line">        &#123;&#123;if .Done&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;done&quot;</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;else&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;end&#125;&#125;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">li</span><span class="selector-class">.done</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-decoration</span> : line-through;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-weight</span>: <span class="number">100</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><img src='https://i.ibb.co/StgnZd5/2022-04-02-7-11-15.png' width='400' alt='example' /><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/templates/">https://gowebexamples.com/templates/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Template/">Template</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 1 - Hello World</title>
      <link>https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/</link>
      <guid>https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/</guid>
      <pubDate>Thu, 31 Mar 2022 08:00:50 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;0-소개&quot;&gt;&lt;a href=&quot;#0-소개&quot; class=&quot;headerlink&quot; title=&quot;0. 소개&quot;&gt;&lt;/a&gt;0. 소개&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Go 언어의 표준 라이브러리인 &lt;code&gt;net/http&lt;/code&gt; 패키지를 이용하여 간단한 웹 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="0-소개"><a href="#0-소개" class="headerlink" title="0. 소개"></a>0. 소개</h2><hr><p>Go 언어의 표준 라이브러리인 <code>net/http</code> 패키지를 이용하여 간단한 웹 서버를 열어보겠습니다.</p><h2 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1. HTTP?"></a>1. HTTP?</h2><hr><p>HTTP(HyperText Transfer Protocol)는 w3 상에서 데이터를 주고 받기 위해 만든 전송 규약입니다.</p><p>데이터를 요청(request)하는 클라이언트(Client)와 데이터를 응답(response)하는 서버(Server)로 구성됩니다.</p><h2 id="2-요청-핸들러-등록"><a href="#2-요청-핸들러-등록" class="headerlink" title="2. 요청 핸들러 등록"></a>2. 요청 핸들러 등록</h2><hr><p>먼저 HTTP 클라이언트 요청을 수신하는 핸들러를 만듭니다.</p><p><code>http.HandleFunc</code>의 시그니처는 다음과 같습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure><p><code>“/”</code> 경로로 요청이 들어오면 <code>“Hello, World!”</code>를 보내봅시다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span> <span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-포트-설정"><a href="#3-포트-설정" class="headerlink" title="3. 포트 설정"></a>3. 포트 설정</h2><hr><p>포트(Port)는 외부와 통신을 하기 위해 만든 연결 부분입니다. 데이터가 들어오는 항구(Port)라고 생각하면 됩니다. HTTP는 기본적으로 80포트를 사용합니다. HTTP 프로그램이 80포트를 계속 확인하고 있다가 요청에 응답하는 것입니다.</p><p>이렇게 계속 요청을 확인하는 것을 <code>“듣는다(Listening)”</code>라고 표현합니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>80포트는 이미 사용 중 일수도 있기 때문에 8080포트를 사용하겠습니다.</p><p>만일 포트 충돌이 발생한다면, 다른 포트번호를 넣어주면 됩니다.</p><h2 id="4-전체-코드"><a href="#4-전체-코드" class="headerlink" title="4. 전체 코드"></a>4. 전체 코드</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span> <span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run server.go</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/T2f4xKX/2022-03-31-4-38-19.png" alt="https://i.ibb.co/T2f4xKX/2022-03-31-4-38-19.png"></p><h2 id="5-http-ResponseWriter-이해"><a href="#5-http-ResponseWriter-이해" class="headerlink" title="5. http.ResponseWriter 이해"></a>5. http.ResponseWriter 이해</h2><hr><p>핸들러의 코드를 다시 한번 봅시다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span> <span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>C언어의 File I/O를 해봤던 분들이라면 해당 코드를 쉽게 이해할 수 있을 겁니다.</p><p>네트워크 통신도 일종의 I/O 과정입니다. 이 부분을 이해하기 위해서는 파일 디스크립터를 공부해보세요!</p><p>다시 본론으로 돌아와서 다른 방법으로 응답해보겠습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span> <span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;Hello, World!&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>http.ResponseWriter.Wrtie</code> 메소드는 <code>byte</code> 배열을 인자로 받습니다. 따라서 string을 <code>[]byte</code>로 캐스팅 해줍니다. 이 방법 말고도 <code>io</code> 패키지를 이용하는 방법도 있습니다.</p><h2 id="6-결론"><a href="#6-결론" class="headerlink" title="6. 결론"></a>6. 결론</h2><hr><p>HTTP 요청을 받는 핸들러를 등록하고 포트를 할당하면 기본적인 웹 서버 구축됩니다.</p><p><code>http.ResponseWriter</code>는 파일 디스크립터처럼 사용되므로 io관련 패키지들로 쓸 수 있습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/hello-world/">https://gowebexamples.com/hello-world/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/HTTP/">HTTP</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Svelte 기본 개념과 사용 방법</title>
      <link>https://jehwanyoo.net/2022/03/26/Svelte-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/</link>
      <guid>https://jehwanyoo.net/2022/03/26/Svelte-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/</guid>
      <pubDate>Sat, 26 Mar 2022 09:34:35 GMT</pubDate>
      
        
        
      <description>&lt;center&gt;&lt;img src=&#39;https://i.ibb.co/60q2y0T/image.jpg&#39; width=&#39;300&#39; alt=&#39;Svelte Logo&#39; /&gt;&lt;/center&gt;

&lt;h2 id=&quot;스벨트란&quot;&gt;&lt;a href=&quot;#스벨트란&quot; class=&quot;header</description>
        
      
      
      
      <content:encoded><![CDATA[<center><img src='https://i.ibb.co/60q2y0T/image.jpg' width='300' alt='Svelte Logo' /></center><h2 id="스벨트란"><a href="#스벨트란" class="headerlink" title="스벨트란?"></a>스벨트란?</h2><hr><p>스벨트(Svelte)는 2019년 출시한 굉장히 따끈따끈한 웹 프레임워크이다.</p><p>스벨트는 기존 웹 프레임워크 3대장 Angular, React, Vue와는 완전히 다른 접근법을 시도한다.</p><h2 id="Frameworks-without-framework"><a href="#Frameworks-without-framework" class="headerlink" title="Frameworks without framework"></a>Frameworks without framework</h2><hr><p>보통의 모던 프레임워크들은 자체 엔진에 의존을 하여 렌더링을 한다. (즉, 런타임에서 렌더링 준비를 한다.)</p><p>하지만 스벨트의 경우 컴파일 단계에서 최대한 렌더링 준비가 끝날 수 있도록 노력한다.</p><p>스벨트는 결국 <a href="http://vanilla-js.com/">Vanilla JS</a>를 지향한다는 것을 알 수 있다. 그 어떤 방법론이 등장하더라도 Vanilla JS보다 빠를 수 없기 때문이다.</p><h2 id="스벨트의-특징"><a href="#스벨트의-특징" class="headerlink" title="스벨트의 특징"></a>스벨트의 특징</h2><hr><ol><li>Write less code (적은 코드)</li><li>No Virtual DOM (가상 돔 없음)</li><li>Truly reactive (진정한 반응성)</li></ol><h3 id="Write-less-code"><a href="#Write-less-code" class="headerlink" title="Write less code"></a>Write less code</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> count = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    count += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;increment&#125;</span>&gt;</span></span><br><span class="line">  Clicks: &#123;count&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>다른 프레임워크들과 비교해봐도 컴포넌트가 굉장히 심플한 구조를 따르고 있다.</p><p>스벨트는 별도의 클래스나 객체를 따로 정의하지 않고도 상태(state)를 추적할 수 있도록 해준다.</p><h3 id="No-Virtual-DOM"><a href="#No-Virtual-DOM" class="headerlink" title="No Virtual DOM"></a>No Virtual DOM</h3><p>애플리케이션이 복잡해지고 DOM Tree의 크기가 커지게 되면 화면을 업데이트할 때 성능 문제가 발생한다.</p><p>가상 돔(Virtual DOM)은 이런 기존의 문제점을 해결하기 위해 React나 Vue에 등장했다.</p><p>하지만 버추얼 돔 없이도 <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">최적화가 가능하다는 것</a>이 밝혀졌고, 스벨트는 컴파일 단계에서 최적화된 소스코드를 제공한다. 따라서 Virtual DOM 없이도 최적의 성능을 발휘할 수 있다.</p><p>이미 어느정도 성숙기에 들어간 React나 Vue가 당장 Virtual DOM을 버리지는 않을 것 같기 때문에 현재로썬 스벨트가 동일한 성능에서 가장 작은 소스코드를 만든다고 할 수 있다.</p><h3 id="Truly-Reactive"><a href="#Truly-Reactive" class="headerlink" title="Truly Reactive"></a>Truly Reactive</h3><p>React는 이름부터 리액티브하고 Vue도 Reactive 리액티브 프로그래밍을 지향한다.</p><p>리액티브 프로그래밍은 이벤트가 발생했을 때 바인딩 되어 있는 상태(state)가 자동으로 갱신되는 것을 뜻한다.</p><p>리액티브 프로그래밍은 선언적 방식으로 코드를 매우 간결하고 직관적으로 만들어준다는 장점이 있다.</p><p>스벨트의 Truly Reactive…의 의미는 React나 Vue에 비해 더 성능이 뛰어나다는게 아니라 설계 측면에서 더 컴팩트해졌다는 것을 의미하는 것 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> count = <span class="number">0</span></span></span><br><span class="line"><span class="javascript"><span class="attr">$</span>: doubled = count * <span class="number">2</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    count += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;increment&#125;</span>&gt;</span></span><br><span class="line">  Clicks: &#123;count&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue (&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="attr">double</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.count * <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>스벨트의 <code>$</code>는 Vue의 computed와 유사한 개념이다.  동일한 동작을 수행하지만 Vue에 비해서 확실히 컴팩트해졌다.</p><h2 id="스벨트-설치"><a href="#스벨트-설치" class="headerlink" title="스벨트 설치"></a>스벨트 설치</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx degit sveltejs/template project-name</span><br><span class="line"><span class="built_in">cd</span> project-name</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>참고: <a href="https://github.com/sveltejs/template">https://github.com/sveltejs/template</a></p><img src='https://i.ibb.co/hWdNgCP/2022-03-26-4-26-07.png' width='300' alt='스벨트 구조' /><p>스벨트 템플릿을 사용하면 기본적으로 rollup 번들러를 사용한다.</p><h2 id="자바스크립트-→-타입스크립트-선택-사항"><a href="#자바스크립트-→-타입스크립트-선택-사항" class="headerlink" title="자바스크립트 → 타입스크립트 (선택 사항)"></a>자바스크립트 → 타입스크립트 (선택 사항)</h2><hr><p>타입스크립트로 개발하기 원한다면 scripts/setupTypeScript.js를 실행하라.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node scripts/setupTypeScript.js <span class="comment"># 자바스크립트 → 타입스크립트</span></span><br><span class="line">npm install <span class="comment"># 전환 이후에는 다시 설치해줘야한다.</span></span><br></pre></td></tr></table></figure><h2 id="프로젝트-빌드와-테스트"><a href="#프로젝트-빌드와-테스트" class="headerlink" title="프로젝트 빌드와 테스트"></a>프로젝트 빌드와 테스트</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev <span class="comment"># 개발 서버 실행</span></span><br></pre></td></tr></table></figure><img src='https://i.ibb.co/nRrYPLM/2022-03-26-4-35-50.png' width='300' alt='스벨트 build 후' /><p><code>npm run dev</code> 혹은 <code>npm run build</code> 를 실행하면 <code>public/build</code> 폴더에 컴파일된 js 코드가 생성된다.</p><img src='https://i.ibb.co/y5HwX5K/2022-03-26-4-38-24.png' width='600' alt='스벨트 index.html' /><p><code>public/index.html</code>을 보면 <code>/build/bundle.js</code>를 불러오고 있다.</p><p>이 템플릿의 경우, public 폴더를 루트로 하는 static 서버를 실행한다.</p><p><code>npm run start</code> 명령어는 아무런 빌드를 하지 않고 static 서버만 실행한다.</p><blockquote><p>SSR 솔루션은 <a href="https://kit.svelte.dev/">SvelteKit</a>을 사용하라. 스벨트의 Next.js라고 생각하면 된다.</p></blockquote><h2 id="스벨트-구조"><a href="#스벨트-구조" class="headerlink" title="스벨트 구조"></a>스벨트 구조</h2><hr><img src='https://i.ibb.co/QdfWtSS/2022-03-26-4-46-50.png' width='300' alt='스벨트 main.js, App.svelte' /><p><code>main.js</code>는 엔트리 파일이다.</p><p><code>App.svelte</code>는 최상위 컴포넌트이다.</p><p>스벨트의 컴포넌트는 <code>*.svelte</code>의 확장자를 갖는다.</p><img src='https://i.ibb.co/MZhBFLG/2022-03-26-4-51-25.png' width='600' alt='스벨트 App.svelte' /><p>컴포넌트는 <code>script</code>, <code>markup</code>, <code>style</code>의 3단구조로 이루어져 있다.</p><h2 id="시맨틱-Semantic-설계"><a href="#시맨틱-Semantic-설계" class="headerlink" title="시맨틱(Semantic) 설계"></a>시맨틱(Semantic) 설계</h2><hr><img src='https://i.ibb.co/BPVZm24/2022-03-26-4-59-26.png' width='450' alt='시맨틱 웹' /><p>시맨틱 웹을 설계하면서 스벨트의 기본 사용법을 익혀보자.</p><img src='https://i.ibb.co/vvqf705/2022-03-26-5-02-21.png' width='300' alt='스벨트 컴포넌트' /><p>설계대로 컴포넌트 파일을 만들자.</p><h3 id="App-svelte"><a href="#App-svelte" class="headerlink" title="App.svelte"></a>App.svelte</h3><img src='https://i.ibb.co/BVFPCjk/2022-03-26-5-06-59.png' width='600' alt='App.svelte - 1' /><p>만들어진 컴포넌트들을 모두 import한다.</p><h3 id="Header-svelte"><a href="#Header-svelte" class="headerlink" title="Header.svelte"></a>Header.svelte</h3><p>헤더를 작성해보자. 딱히 스크립트나 스타일이 필요 없다면 쓰지 않아도 무방하다.</p><img src='https://i.ibb.co/WVXq11j/2022-03-26-5-12-42.png' width='600' alt='Header.svelte - 1' /><img src='https://i.ibb.co/RH5LHg5/2022-03-26-5-10-16.png' width='600' alt='Header.svelte - 2' /><p>HMR(hot module replacement)을 지원하기 때문에 개발 웹 페이지는 별도로 새로고침을 하지 않아도 업데이트 된다.</p><h3 id="Nav-svelte"><a href="#Nav-svelte" class="headerlink" title="Nav.svelte"></a>Nav.svelte</h3><p>Nav(navigation)은 breadcrumb 스타일로 만들어보자.</p><img src='https://i.ibb.co/bWBFfS2/2022-03-26-5-30-07.png' width='600' alt='Nav.svelte - 1' /><img src='https://i.ibb.co/DR34zHz/2022-03-26-5-20-17.png' width='600' alt='Nav.svelte - 2' /><h3 id="Aside-svelte-amp-Section-svelte"><a href="#Aside-svelte-amp-Section-svelte" class="headerlink" title="Aside.svelte &amp; Section.svelte"></a>Aside.svelte &amp; Section.svelte</h3><p>Aside는 자유 게시판의 인기글, 최신글을 분류하는 개념 정의한다.</p><p>Section은 자유 게시판의 글을 표시하는 영역으로 정의한다.</p><img src='https://i.ibb.co/XWNNCYh/2022-03-26-5-49-19.png' width='600' alt='Aside.svelte & Section.svelte - 1' /><img src='https://i.ibb.co/8DJR65p/2022-03-26-5-49-31.png' width='600' alt='Aside.svelte & Section.svelte - 2' /><p>slot은 다른 임의의 컴포넌트가 중첩되어 전달된다는 의미이다.</p><img src='https://i.ibb.co/gDpwHzv/2022-03-26-5-51-19.png' width='600' alt='Aside.svelte & Section.svelte - 3' /><h3 id="Footer-svelte"><a href="#Footer-svelte" class="headerlink" title="Footer.svelte"></a>Footer.svelte</h3><p>footer는 맨 바닥에 있는 요소를 뜻하며 저작권 정보를 한번 넣어보자.</p><img src='https://i.ibb.co/0B4WsNB/2022-03-26-5-54-05.png' width='600' alt='Footer.svelte - 1' /><img src='https://i.ibb.co/f8NxDq0/2022-03-26-5-55-18.png' width='600' alt='Footer.svelte - 2' /><h3 id="Article-svelte"><a href="#Article-svelte" class="headerlink" title="Article.svelte"></a>Article.svelte</h3><p>이제 Section안에 들어가게될 Article을 만들어보자.</p><p>Article의 경우 재사용을 하기 때문에 부모 컴포넌트로부터 props를 받아서 렌더링 해보자.</p><p>스벨트의 props는 <code>export</code> 키워드를 사용하여 정의한다.</p><img src='https://i.ibb.co/w4kcSKV/2022-03-26-6-15-08.png' width='600' alt='Article.svelte - 1' /><p><code>export let</code> 으로 선언된 변수를 초기화하면 prop이 전달되지 않았을 때 기본값으로 해석할 수 있다.</p><p>이제 <code>App.svelte</code> 로 이동해서 prop을 넘겨주자.</p><img src='https://i.ibb.co/jk9TQYD/2022-03-26-6-21-44.png' width='600' alt='Article.svelte - 2' /><img src='https://i.ibb.co/C7J0Nwf/2022-03-26-6-23-41.png' width='600' alt='Article.svelte - 3' /><p>이로써 스벨트의 기본적인 사용법을 알아보았다.</p><p>다음 포스팅에는 State, Prop, Event에 대해 자세히 알아보겠다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="http://www.yes24.com/Product/Goods/106212164">스벨트로 시작하는 웹 프론트엔드</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Node-js/">Node.js</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Svelte/">Svelte</category>
      
      <category domain="https://jehwanyoo.net/tags/Front-end-Frameworks/">Front-end Frameworks</category>
      
      
      <comments>https://jehwanyoo.net/2022/03/26/Svelte-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
