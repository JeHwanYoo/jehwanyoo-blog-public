<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JeHwan PL Note</title>
    <link>https://jehwanyoo.net/</link>
    
    <atom:link href="https://jehwanyoo.net/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프로그래밍 노트, 팁, 강의등을 게시하는 블로그입니다.</description>
    <pubDate>Fri, 08 Apr 2022 20:18:59 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>웹 프로그래밍 with Golang 7 - REST API 설계와 테스트</title>
      <link>https://jehwanyoo.net/2022/04/09/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-7-REST-API-%EC%84%A4%EA%B3%84%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
      <guid>https://jehwanyoo.net/2022/04/09/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-7-REST-API-%EC%84%A4%EA%B3%84%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8/</guid>
      <pubDate>Fri, 08 Apr 2022 20:06:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스트&quot;&gt;&lt;a href=&quot;#지난-포스트&quot; class=&quot;headerlink&quot; title=&quot;지난 포스트&quot;&gt;&lt;/a&gt;지난 포스트&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스트"><a href="#지난-포스트" class="headerlink" title="지난 포스트"></a>지난 포스트</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/">웹 프로그래밍 with Golang 3 - 정적 파일</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/">웹 프로그래밍 with Golang 4 - 라우팅</a></p><p><a href="https://jehwanyoo.net/2022/04/06/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-5-Form-JSON/">웹 프로그래밍 with Golang 5 - Form &amp; JSON</a></p><p><a href="https://jehwanyoo.net/2022/04/07/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-6-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/">웹 프로그래밍 with Golang 6 - 데이터베이스</a></p><blockquote><p>Restful API에 대한 이해가 부족하다면 <a href="https://jehwanyoo.net/2021/05/19/%EC%A2%8B%EC%9D%80-REST-API-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EC%B0%B0/">좋은 REST API 설계 방법에 대한 고찰</a>이라는 포스팅을 한번 보시길 바랍니다.</p></blockquote><blockquote><p>Restful API에 대한 이해가 부족하다면 <a href="https://jehwanyoo.net/2021/05/19/%EC%A2%8B%EC%9D%80-REST-API-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EC%B0%B0/">좋은 REST API 설계 방법에 대한 고찰</a>이라는 포스팅을 한번 보시길 바랍니다.</p></blockquote><h2 id="설계"><a href="#설계" class="headerlink" title="설계"></a>설계</h2><hr><p><a href="http://www.yes24.com/Product/Goods/99108736">Tucker의 Go 언어 프로그래밍</a> 교재에 나온 연습문제를 기반으로 Rest API를 설계해보겠습니다.</p><table><thead><tr><th>메서드</th><th>URL</th><th>동작</th></tr></thead><tbody><tr><td>GET</td><td>/news</td><td>전체 뉴스 데이터 반환</td></tr><tr><td>GET</td><td>/news/{id}</td><td>특정 id의 뉴스 데이터 반환</td></tr><tr><td>POST</td><td>/news</td><td>새로운 뉴스 등록</td></tr><tr><td>PATCH</td><td>/news/{id}</td><td>특정 id의 뉴스 데이터 수정</td></tr><tr><td>DELETE</td><td>/news/{id}</td><td>특정 id의 뉴스 데이터 삭제</td></tr></tbody></table><p>구현 이후에는 <code>net/http/httptest</code> 모듈을 이용하여 테스트를 진행하겠습니다.</p><h2 id="뉴스-스키마"><a href="#뉴스-스키마" class="headerlink" title="뉴스 스키마"></a>뉴스 스키마</h2><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> news (</span><br><span class="line">  id TEXT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  title TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  author TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  content TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go mod init news-api</span><br><span class="line"></span><br><span class="line">go get github.com/gorilla/mux <span class="comment"># Router</span></span><br><span class="line">go get github.com/google/uuid <span class="comment"># UUID</span></span><br><span class="line">go get github.com/mattn/go-sqlite3 <span class="comment"># DB Driver</span></span><br></pre></td></tr></table></figure><p>프로젝트 디렉터리를 생성한 다음 <code>go mod init</code>을 이용하여 프로젝트를 초기화 해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── controller</span><br><span class="line">│   └── news</span><br><span class="line">│       └── news.controller.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── replit.nix</span><br><span class="line">├── repository</span><br><span class="line">│   ├── connect.go</span><br><span class="line">│   └── news</span><br><span class="line">│       └── news.repository.go</span><br><span class="line">└── service</span><br><span class="line">    └── news</span><br><span class="line">        └── news.service.go</span><br></pre></td></tr></table></figure><p><code>repository</code>와 <code>service</code>를 생성해줍니다.</p><p><code>repository</code>는 DB driver를 이용하여 직접 데이터베이스와 통신합니다.</p><p><code>service</code>는 <code>repository</code>를 호출하여 데이터를 획득하고 처리합니다.</p><p><code>controller</code>는 클라이언트가 보낸 데이터를 validation하고 적절한 <code>service</code>를 호출합니다. (라우터)</p><h2 id="repository-connect-go"><a href="#repository-connect-go" class="headerlink" title="repository/connect.go"></a>repository/connect.go</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> repository</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenWithMemory</span><span class="params">()</span> <span class="params">(*sql.DB, error)</span></span> &#123;</span><br><span class="line">  db, err := sql.Open(<span class="string">&quot;sqlite3&quot;</span>, <span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  err = db.Ping()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _, err = createNewsTable(db)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNewsTable</span><span class="params">(db *sql.DB)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  query := <span class="string">`</span></span><br><span class="line"><span class="string">  CREATE TABLE news (</span></span><br><span class="line"><span class="string">    id TEXT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    title TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    author TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    content TEXT NOT NULL</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  result, err := db.Exec(query)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="repository-news-news-repository-go"><a href="#repository-news-news-repository-go" class="headerlink" title="repository/news/news.repository.go"></a>repository/news/news.repository.go</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> news</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewsDto <span class="keyword">struct</span> &#123;</span><br><span class="line">  Title   <span class="keyword">string</span></span><br><span class="line">  Author  <span class="keyword">string</span></span><br><span class="line">  Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewsRaw <span class="keyword">struct</span> &#123;</span><br><span class="line">  Id      <span class="keyword">string</span></span><br><span class="line">  Author  <span class="keyword">string</span></span><br><span class="line">  Title   <span class="keyword">string</span></span><br><span class="line">  Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewsRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">  DB *sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Repository NewsRepository</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">AssignDB</span><span class="params">(db *sql.DB)</span></span> &#123;</span><br><span class="line">  r.DB = db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">InsertNews</span><span class="params">(n NewsDto)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  id, err := uuid.NewRandom()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  query := <span class="string">`</span></span><br><span class="line"><span class="string">    INSERT INTO news</span></span><br><span class="line"><span class="string">    (id, title, author, content)</span></span><br><span class="line"><span class="string">    VALUES (?, ?, ?, ?)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  result, err := r.DB.Exec(query, id.String(), n.Title, n.Author, n.Content)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">GetAllNews</span><span class="params">()</span> <span class="params">(*[]NewsRaw, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> raws []NewsRaw</span><br><span class="line"></span><br><span class="line">  query := <span class="string">`SELECT * FROM news`</span></span><br><span class="line">  rows, err := r.DB.Query(query)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    <span class="keyword">var</span> raw NewsRaw</span><br><span class="line">    rows.Scan(&amp;raw.Id, &amp;raw.Title, &amp;raw.Author, &amp;raw.Content)</span><br><span class="line">    raws = <span class="built_in">append</span>(raws, raw)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;raws, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">GetOneNews</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(*NewsRaw, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> raw NewsRaw</span><br><span class="line"></span><br><span class="line">  query := <span class="string">`SELECT * FROM news WHERE id = ?`</span></span><br><span class="line">  err := r.DB.QueryRow(query, id).Scan(&amp;raw.Id, &amp;raw.Title, &amp;raw.Author, &amp;raw.Content)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err.Error() == <span class="string">&quot;sql: no rows in result set&quot;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;NOT FOUND&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;raw, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">DeleteOneNews</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  query := <span class="string">`DELETE FROM news WHERE id = ?`</span></span><br><span class="line">  result, err := r.DB.Exec(query, id)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  affected, err := result.RowsAffected()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> affected == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;NOT FOUND&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *NewsRepository)</span> <span class="title">UpdateOneNews</span><span class="params">(id <span class="keyword">string</span>, n NewsDto)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  query := <span class="string">`UPDATE news SET title = IFNULL(?, title), author = IFNULL(?, author), content = IFNULL(?, content) WHERE id = ?`</span></span><br><span class="line">  <span class="keyword">var</span> title, author, content *<span class="keyword">string</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> n.Title != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    title = &amp;n.Title</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> n.Author != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    author = &amp;n.Author</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> n.Content != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    content = &amp;n.Content</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  result, err := r.DB.Exec(query, title, author, content, id)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  affected, err := result.RowsAffected()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> affected == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;NOT FOUND&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service-news-news-service-go"><a href="#service-news-news-service-go" class="headerlink" title="service/news/news.service.go"></a>service/news/news.service.go</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> news</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;news-api/repository&quot;</span></span><br><span class="line">  <span class="string">&quot;news-api/repository/news&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewsService <span class="keyword">struct</span> &#123;</span><br><span class="line">  Repository *news.NewsRepository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Service NewsService</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">InitService</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  db, err := repository.OpenWithMemory()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s.Repository = &amp;news.Repository</span><br><span class="line">  s.Repository.AssignDB(db)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">GetAllNews</span><span class="params">()</span> <span class="params">(*[]news.NewsRaw, error)</span></span> &#123;</span><br><span class="line">  raws, err := s.Repository.GetAllNews()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> raws, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">GetOneNews</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(*news.NewsRaw, error)</span></span> &#123;</span><br><span class="line">  raw, err := s.Repository.GetOneNews(id)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> raw, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">CreateNews</span><span class="params">(n news.NewsDto)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := s.Repository.InsertNews(n)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">UpdateNews</span><span class="params">(id <span class="keyword">string</span>, n news.NewsDto)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := s.Repository.UpdateOneNews(id, n)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *NewsService)</span> <span class="title">DeleteNews</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := s.Repository.DeleteOneNews(id)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller-news-news-controller-go"><a href="#controller-news-news-controller-go" class="headerlink" title="controller/news/news.controller.go"></a>controller/news/news.controller.go</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> news</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">  <span class="string">&quot;errors&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;news-api/service/news&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CommonResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">  Data   <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">  Status <span class="keyword">int</span>         <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">  Error  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Response</span><span class="params">(w http.ResponseWriter, data <span class="keyword">interface</span>&#123;&#125;, status <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res CommonResponse</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> status == http.StatusOK &#123;</span><br><span class="line">    res.Data = data</span><br><span class="line">    res.Status = status</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.Status = status</span><br><span class="line">    res.Error = err.Error()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)</span><br><span class="line">  w.WriteHeader(status)  </span><br><span class="line">  json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewController</span><span class="params">(router *mux.Router)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  err := news.Service.InitService()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET 특정 id의 뉴스 데이터 반환</span></span><br><span class="line">  router.HandleFunc(<span class="string">&quot;/news/&#123;id&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    id := vars[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line">    raw, err := news.Service.GetOneNews(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> err.Error() &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;NOT FOUND&quot;</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusNotFound, errors.New(<span class="string">&quot;해당 뉴스가 없습니다.&quot;</span>))</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response(w, raw, http.StatusOK, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">  &#125;).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GET 전체 뉴스 데이터 반환</span></span><br><span class="line">  router.HandleFunc(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    raws, err := news.Service.GetAllNews()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Response(w, raws, http.StatusOK, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">  &#125;).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// POST 새로운 뉴스 등록</span></span><br><span class="line">  router.HandleFunc(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body <span class="keyword">struct</span>&#123;</span><br><span class="line">      Title <span class="keyword">string</span></span><br><span class="line">      Author <span class="keyword">string</span></span><br><span class="line">      Content <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err := json.NewDecoder(r.Body).Decode(&amp;body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> body.Title == <span class="string">&quot;&quot;</span> || body.Author == <span class="string">&quot;&quot;</span> || body.Content == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">      Response(w, <span class="literal">nil</span>, http.StatusBadRequest, errors.New(<span class="string">&quot;파라미터가 누락되었습니다.&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err = news.Service.CreateNews(body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response(w, <span class="string">&quot;OK&quot;</span>, http.StatusOK, <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PATCH 특정 id의 뉴스 데이터 수정</span></span><br><span class="line">  router.HandleFunc(<span class="string">&quot;/news/&#123;id&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    id := vars[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body <span class="keyword">struct</span>&#123;</span><br><span class="line">      Title <span class="keyword">string</span></span><br><span class="line">      Author <span class="keyword">string</span></span><br><span class="line">      Content <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err := json.NewDecoder(r.Body).Decode(&amp;body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = news.Service.UpdateNews(id, body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> err.Error() &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;NOT FOUND&quot;</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusNotFound, errors.New(<span class="string">&quot;해당 뉴스가 없습니다.&quot;</span>))</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response(w, <span class="string">&quot;OK&quot;</span>, http.StatusOK, <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).Methods(<span class="string">&quot;PATCH&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DELETE 특정 id의 뉴스 데이터 삭제</span></span><br><span class="line">  router.HandleFunc(<span class="string">&quot;/news/&#123;id&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    id := vars[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    err = news.Service.DeleteNews(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> err.Error() &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;NOT FOUND&quot;</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusNotFound, errors.New(<span class="string">&quot;해당 뉴스가 없습니다.&quot;</span>))</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        Response(w, <span class="literal">nil</span>, http.StatusInternalServerError, err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Response(w, <span class="string">&quot;OK&quot;</span>, http.StatusOK, <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).Methods(<span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">  <span class="string">&quot;news-api/controller/news&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := mux.NewRouter()</span><br><span class="line">  err := news.NewController(r)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;서버 실행에 실패했습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:3000&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><hr><p>News API는 공통 응답 포맷(CommonResponse)을 갖도록 설계하였습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CommonResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">  Data   <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">  Status <span class="keyword">int</span>         <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">  Error  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>status</code>가 <code>200</code>일 경우 <code>data</code>가 존재하고 <code>error</code>가 <code>null</code>입니다.</p><p><code>status</code>가 <code>200</code>이 아닐 경우 <code>data</code>가 <code>null</code>이고 <code>error</code>가 존재합니다.</p><h2 id="테스트-코드-작성-news-controller-test-go"><a href="#테스트-코드-작성-news-controller-test-go" class="headerlink" title="테스트 코드 작성 (news_controller_test.go)"></a>테스트 코드 작성 (news_controller_test.go)</h2><hr><p>테스트를 돕는 패키지를 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/strechr/testify</span><br></pre></td></tr></table></figure><p>루트 위치에 테스트 파일(<code>news_controller_test.go</code>)을 만듭니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">  <span class="string">&quot;news-api/controller/news&quot;</span></span><br><span class="line">  <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAndSearch</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> res *httptest.ResponseRecorder</span><br><span class="line">  <span class="keyword">var</span> req *http.Request</span><br><span class="line">  <span class="keyword">var</span> assert = assert.New(t)</span><br><span class="line">  <span class="keyword">var</span> r = mux.NewRouter()</span><br><span class="line">  </span><br><span class="line">  news.NewController(r)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 생성</span></span><br><span class="line">  res = httptest.NewRecorder()</span><br><span class="line">  req = httptest.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/news&quot;</span>, strings.NewReader(<span class="string">`&#123;&quot;title&quot;: &quot;Hello&quot;, &quot;author&quot;: &quot;JehwanYoo&quot;, &quot;Content&quot;: &quot;This is Test&quot;&#125;`</span>))</span><br><span class="line"></span><br><span class="line">  r.ServeHTTP(res, req)</span><br><span class="line">  assert.Equal(http.StatusOK, res.Code)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 조회</span></span><br><span class="line">  res = httptest.NewRecorder()</span><br><span class="line">  req = httptest.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/news&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">  r.ServeHTTP(res, req)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> response <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data []<span class="keyword">struct</span> &#123;</span><br><span class="line">      Id <span class="keyword">string</span></span><br><span class="line">      Title <span class="keyword">string</span></span><br><span class="line">      Author <span class="keyword">string</span></span><br><span class="line">      Content <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    Status <span class="keyword">int</span></span><br><span class="line">    Error <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  err := json.NewDecoder(res.Body).Decode(&amp;response)</span><br><span class="line"></span><br><span class="line">  assert.Nil(err)</span><br><span class="line">  assert.Equal(http.StatusOK, res.Code)</span><br><span class="line">  assert.Nil(response.Error)</span><br><span class="line">  assert.Equal(http.StatusOK, response.Status)</span><br><span class="line">  assert.Equal(<span class="string">&quot;Hello&quot;</span>, response.Data[<span class="number">0</span>].Title)</span><br><span class="line">  assert.Equal(<span class="string">&quot;JehwanYoo&quot;</span>, response.Data[<span class="number">0</span>].Author)</span><br><span class="line">  assert.Equal(<span class="string">&quot;This is Test&quot;</span>, response.Data[<span class="number">0</span>].Content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트는 위와 같이 설계해주면 됩니다. 나머지 API에 대한 테스트도 구현해보세요.</p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Web-Programming-With-Golang/">Web Programming With Golang</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/09/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-7-REST-API-%EC%84%A4%EA%B3%84%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 6 - 데이터베이스</title>
      <link>https://jehwanyoo.net/2022/04/07/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-6-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/</link>
      <guid>https://jehwanyoo.net/2022/04/07/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-6-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/</guid>
      <pubDate>Thu, 07 Apr 2022 02:18:56 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스트&quot;&gt;&lt;a href=&quot;#지난-포스트&quot; class=&quot;headerlink&quot; title=&quot;지난 포스트&quot;&gt;&lt;/a&gt;지난 포스트&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스트"><a href="#지난-포스트" class="headerlink" title="지난 포스트"></a>지난 포스트</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/">웹 프로그래밍 with Golang 3 - 정적 파일</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/">웹 프로그래밍 with Golang 4 - 라우팅</a></p><p><a href="https://jehwanyoo.net/2022/04/06/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-5-Form-JSON/">웹 프로그래밍 with Golang 5 - Form &amp; JSON</a></p><h2 id="회원-서비스-개발"><a href="#회원-서비스-개발" class="headerlink" title="회원 서비스 개발"></a>회원 서비스 개발</h2><hr><p>간단한 회원 서비스를 구현해보겠습니다.</p><p>회원가입을 구현하기 위해서는 아래와 같은 지식이 필요합니다.</p><ul><li>데이터베이스</li><li>패스워드 해싱 (보안)</li></ul><p>유저 정보에 대한 스키마를 정의하여 데이터베이스에 저장할 것 입니다.</p><p>또한, 패스워드는 반드시 “단방향 해싱 함수”를 이용해 암호화 해야합니다.</p><p>이 튜토리얼에서는 오늘날 흔하게 사용되는 <code>bcrypt</code> 방식으로 패스워드를 암호화 할 것 입니다.</p><p>bcrypt가 무엇인지 궁금하다면 <a href="https://velog.io/@kylexid/%EC%99%9C-bcrypt-%EC%95%94%ED%98%B8%ED%99%94-%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EC%B6%94%EC%B2%9C%EB%90%98%EC%96%B4%EC%A7%88%EA%B9%8C">이 링크</a>를 참고해주시기 바랍니다.</p><h2 id="sqlite3-driver-설치"><a href="#sqlite3-driver-설치" class="headerlink" title="sqlite3 driver 설치"></a>sqlite3 driver 설치</h2><hr><p>데이터베이스를 관리하기 위한 소프트웨어로 DBMS(Database Management System)가 존재합니다.</p><p>SQLite는 SQL 기반의 다른 DBMS들에 비해 매우 가볍게 설계되어, 테스트용이나 작은 규모의 데이터베이스를 관리하는데 유용합니다.</p><blockquote><p>보안이 중요하거나, 더 큰 규모의 데이터베이스를 운용하려면 다른 DBMS를 사용하세요.</p></blockquote><p>DMBS와 Golang간의 통신을 하기 위해서는 드라이버(Driver)가 필요합니다.</p><p><code>go-sqlite3</code> 패키지를 설치해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/mattn/go-sqlite3</span><br></pre></td></tr></table></figure><h2 id="sqlite-연결-코드-작성"><a href="#sqlite-연결-코드-작성" class="headerlink" title="sqlite 연결 코드 작성"></a>sqlite 연결 코드 작성</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connectDB</span><span class="params">(dbFile <span class="keyword">string</span>)</span> <span class="params">(*sql.DB, error)</span></span> &#123;</span><br><span class="line">  db, err := sql.Open(<span class="string">&quot;sqlite3&quot;</span>, dbFile)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> db.Ping() != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>database/sql</code> 패키지는 SQL 사용을 위한 golang의 표준 인터페이스입니다.</p><p><code>&quot;github.com/mattn/go-sqlite3&quot;</code> 패키지를 불러올 때 <code>_</code>를 사용하는 이유는 사용하지 않는 패키지를 포함하기 위함입니다. 패키지를 직접적으로 사용하진 않지만 부수효과(Side Effect)를 이용하기 위해서 입니다. <a href="https://stackoverflow.com/questions/21220077/what-does-an-underscore-in-front-of-an-import-statement-mean">참고 링크</a></p><h2 id="users-테이블-생성"><a href="#users-테이블-생성" class="headerlink" title="users 테이블 생성"></a>users 테이블 생성</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createUsersTable</span><span class="params">(db *sql.DB)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">query := <span class="string">`</span></span><br><span class="line"><span class="string">  CREATE TABLE users (</span></span><br><span class="line"><span class="string">    user_id TEXT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    email TEXT UNIQUE NOT NULL,</span></span><br><span class="line"><span class="string">    password TEXT NOT NULL</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  result, err := db.Exec(query)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 튜토리얼은 SQL에 대한 어느정도의 이해가 있다고 가정하겠습니다.</p><p><code>user_id</code>를 기본 키(Primary key)로 하는 테이블을 생성해줍니다. <code>email</code>도 중복이 되면 안되므로 유니크 제약을 설정해줍니다.</p><p><code>db.Exec</code> 메서드를 이용하여 쿼리를 실행할 수 있습니다.</p><h2 id="user-생성"><a href="#user-생성" class="headerlink" title="user 생성"></a>user 생성</h2><hr><p>우선 유저를 만들기 위해 추가적으로 필요한 패키지들을 설치하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/google/uuid     <span class="comment"># unique id 알고리즘 패키지</span></span><br><span class="line">go get golang.org/x/crypto/bcrypt <span class="comment"># bcrypt 알고리즘 패키지</span></span><br></pre></td></tr></table></figure><p>id는 기본 키이기 때문에 절대로 중복 되어서는 안됩니다. 그래서 <code>Auto Increment</code>를 사용하거나 <code>uuid</code>와 같은 unique id 생성 알고리즘을 이용하여 키를 만들게 됩니다.</p><p>bcrypt는 위에서 설명한대로 유저의 패스워드를 해싱하는데 이용하겠습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 아래 두 패키지를 추가적으로 import 해주시기 바랍니다.</span></span><br><span class="line"><span class="comment">  &quot;github.com/google/uuid&quot;</span></span><br><span class="line"><span class="comment">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateHashPassword</span><span class="params">(password <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    bytes, err := bcrypt.GenerateFromPassword([]<span class="keyword">byte</span>(password), <span class="number">14</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(bytes), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertUser</span><span class="params">(db *sql.DB, email <span class="keyword">string</span>, password <span class="keyword">string</span>)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  user_id, err := uuid.NewRandom()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash, err := generateHashPassword(password)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  query := <span class="string">`</span></span><br><span class="line"><span class="string">    INSERT INTO users</span></span><br><span class="line"><span class="string">    (user_id, email, password)</span></span><br><span class="line"><span class="string">    VALUES (?, ?, ?)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  result, err := db.Exec(query, user_id, email, hash)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="User-조회"><a href="#User-조회" class="headerlink" title="User 조회"></a>User 조회</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user_raw <span class="keyword">struct</span> &#123;</span><br><span class="line">  user_id <span class="keyword">string</span></span><br><span class="line">  email <span class="keyword">string</span></span><br><span class="line">  password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(db *sql.DB)</span> <span class="params">(*user_raw, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> raw user_raw</span><br><span class="line">  </span><br><span class="line">  query := <span class="string">`SELECT * FROM users`</span></span><br><span class="line">  err := db.QueryRow(query).Scan(&amp;raw.user_id, &amp;raw.email, &amp;raw.password)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;raw, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>db.QueryRow</code>는 조회문을 실행하고 1개의 row을 가져오는 메서드입니다. 이후 <code>row.Scan</code> 메서드를 이용하여 변수에 할당하면 됩니다.</p><h2 id="DB-Test"><a href="#DB-Test" class="headerlink" title="DB Test"></a>DB Test</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> db *sql.DB</span><br><span class="line">  <span class="keyword">var</span> err error</span><br><span class="line">  <span class="keyword">var</span> raw *user_raw</span><br><span class="line">  </span><br><span class="line">  db, err = connectDB(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;데이터베이스가 연결되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;DB Ready.&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  _, err = createUsersTable(db)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저 테이블이 생성되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Table Created.&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  _, err = insertUser(db, <span class="string">&quot;abc@example.com&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저가 생성되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;User Created.&quot;</span>)</span><br><span class="line"></span><br><span class="line">  raw, err = getUser(db)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저를 불러오는데 실패했습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println()</span><br><span class="line">  fmt.Println(<span class="string">&quot;user_id&quot;</span>, raw.user_id)</span><br><span class="line">  fmt.Println(<span class="string">&quot;email&quot;</span>, raw.email)</span><br><span class="line">  fmt.Println(<span class="string">&quot;password&quot;</span>, raw.password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DB Ready.</span><br><span class="line">Table Created.</span><br><span class="line">User Created.</span><br><span class="line"></span><br><span class="line">user_id 4bb5c95e-bd30-414b-b025-8ba6f1c38e93</span><br><span class="line">email abc@example.com</span><br><span class="line">password $2a$14$MQ6ciEWVRKKg6vrzrrbMJOzPZpeqQ3X6Yc91qIW5Su3St6bNEWnZy</span><br></pre></td></tr></table></figure><p>sqlite에 연결할 때 <code>db</code>파일이 아닌 <code>:memory:</code>를 사용하면 데이터베이스 저장소로 메모리(RAM)를 사용하게 됩니다. 따라서, 프로그램을 종료하면 런타임동안 저장한 데이터가 모두 삭제됩니다. <code>:memory:</code>방식은 변경사항이 누적되지 않기 때문에 유닛 테스트에서 활용 할 수 있습니다.</p><h2 id="코드-전문"><a href="#코드-전문" class="headerlink" title="코드 전문"></a>코드 전문</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">  _ <span class="string">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">  <span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connectDB</span><span class="params">(dbFile <span class="keyword">string</span>)</span> <span class="params">(*sql.DB, error)</span></span> &#123;</span><br><span class="line">  db, err := sql.Open(<span class="string">&quot;sqlite3&quot;</span>, dbFile)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> db.Ping() != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createUsersTable</span><span class="params">(db *sql.DB)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">query := <span class="string">`</span></span><br><span class="line"><span class="string">  CREATE TABLE users (</span></span><br><span class="line"><span class="string">    user_id TEXT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    email TEXT UNIQUE NOT NULL,</span></span><br><span class="line"><span class="string">    password TEXT NOT NULL</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  result, err := db.Exec(query)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateHashPassword</span><span class="params">(password <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    bytes, err := bcrypt.GenerateFromPassword([]<span class="keyword">byte</span>(password), <span class="number">14</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(bytes), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertUser</span><span class="params">(db *sql.DB, email <span class="keyword">string</span>, password <span class="keyword">string</span>)</span> <span class="params">(sql.Result, error)</span></span> &#123;</span><br><span class="line">  user_id, err := uuid.NewRandom()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash, err := generateHashPassword(password)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  query := <span class="string">`</span></span><br><span class="line"><span class="string">    INSERT INTO users</span></span><br><span class="line"><span class="string">    (user_id, email, password)</span></span><br><span class="line"><span class="string">    VALUES (?, ?, ?)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  result, err := db.Exec(query, user_id.String(), email, hash)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user_raw <span class="keyword">struct</span> &#123;</span><br><span class="line">  user_id <span class="keyword">string</span></span><br><span class="line">  email <span class="keyword">string</span></span><br><span class="line">  password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(db *sql.DB)</span> <span class="params">(*user_raw, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> raw user_raw</span><br><span class="line">  </span><br><span class="line">  query := <span class="string">`SELECT * FROM users`</span></span><br><span class="line">  err := db.QueryRow(query).Scan(&amp;raw.user_id, &amp;raw.email, &amp;raw.password)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;raw, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> db *sql.DB</span><br><span class="line">  <span class="keyword">var</span> err error</span><br><span class="line">  <span class="keyword">var</span> raw *user_raw</span><br><span class="line">  </span><br><span class="line">  db, err = connectDB(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;데이터베이스가 연결되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;DB Ready.&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  _, err = createUsersTable(db)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저 테이블이 생성되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;Table Created.&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  _, err = insertUser(db, <span class="string">&quot;abc@example.com&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저가 생성되지 않았습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;User Created.&quot;</span>)</span><br><span class="line"></span><br><span class="line">  raw, err = getUser(db)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;유저를 불러오는데 실패했습니다.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println()</span><br><span class="line">  fmt.Println(<span class="string">&quot;user_id&quot;</span>, raw.user_id)</span><br><span class="line">  fmt.Println(<span class="string">&quot;email&quot;</span>, raw.email)</span><br><span class="line">  fmt.Println(<span class="string">&quot;password&quot;</span>, raw.password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/mysql-database/">https://gowebexamples.com/mysql-database/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Database/">Database</category>
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/SQLite/">SQLite</category>
      
      <category domain="https://jehwanyoo.net/tags/Web-Programming-With-Golang/">Web Programming With Golang</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/07/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-6-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go언어 실험 - Return Value vs Return Pointer</title>
      <link>https://jehwanyoo.net/2022/04/06/Go%EC%96%B8%EC%96%B4-%EC%8B%A4%ED%97%98-Return-Value-vs-Pointer/</link>
      <guid>https://jehwanyoo.net/2022/04/06/Go%EC%96%B8%EC%96%B4-%EC%8B%A4%ED%97%98-Return-Value-vs-Pointer/</guid>
      <pubDate>Wed, 06 Apr 2022 13:44:51 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Return-Value&quot;&gt;&lt;a href=&quot;#Return-Value&quot; class=&quot;headerlink&quot; title=&quot;Return Value&quot;&gt;&lt;/a&gt;Return Value&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight go&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Return-Value"><a href="#Return-Value" class="headerlink" title="Return Value"></a>Return Value</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">  text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnValue</span><span class="params">()</span> <span class="title">myStruct</span></span> &#123;</span><br><span class="line">  s := myStruct&#123; <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct in func %p\n&quot;</span>, &amp;s)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s1 := returnValue()</span><br><span class="line">  s2 := returnValue()</span><br><span class="line">  s3 := returnValue()</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, &amp;s1)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, &amp;s2)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, &amp;s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myStruct in func 0xc000010240</span><br><span class="line">myStruct in func 0xc000010260</span><br><span class="line">myStruct in func 0xc000010280</span><br><span class="line">myStruct from func 0xc000010230</span><br><span class="line">myStruct from func 0xc000010250</span><br><span class="line">myStruct from func 0xc000010270</span><br></pre></td></tr></table></figure><p>Value를 리턴하면 원본이 복사된다.</p><h2 id="Return-Pointer"><a href="#Return-Pointer" class="headerlink" title="Return Pointer"></a>Return Pointer</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">  text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnValue</span><span class="params">()</span> *<span class="title">myStruct</span></span> &#123;</span><br><span class="line">  s := myStruct&#123; <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct in func %p\n&quot;</span>, &amp;s)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &amp;s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s1 := returnValue()</span><br><span class="line">  s2 := returnValue()</span><br><span class="line">  s3 := returnValue()</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, s1)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, s2)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;myStruct from func %p\n&quot;</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myStruct in func 0xc000010230</span><br><span class="line">myStruct in func 0xc000010240</span><br><span class="line">myStruct in func 0xc000010250</span><br><span class="line">myStruct from func 0xc000010230</span><br><span class="line">myStruct from func 0xc000010240</span><br><span class="line">myStruct from func 0xc000010250</span><br></pre></td></tr></table></figure><p>Pointer를 리턴하면 Pointer 값을 복사한다. (즉, 원본 객체에 접근할 수 있다.)</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><hr><ul><li>Value -&gt; 원본을 복사해서 리턴 (새로운 객체를 생성)</li><li>Pointer -&gt; 포인터를 복사해서 리턴 (새로운 객체를 만들지 않음)</li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://jehwanyoo.net/2022/04/06/Go%EC%96%B8%EC%96%B4-%EC%8B%A4%ED%97%98-Return-Value-vs-Pointer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 5 - Form &amp; JSON</title>
      <link>https://jehwanyoo.net/2022/04/06/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-5-Form-JSON/</link>
      <guid>https://jehwanyoo.net/2022/04/06/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-5-Form-JSON/</guid>
      <pubDate>Wed, 06 Apr 2022 04:44:11 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스트&quot;&gt;&lt;a href=&quot;#지난-포스트&quot; class=&quot;headerlink&quot; title=&quot;지난 포스트&quot;&gt;&lt;/a&gt;지난 포스트&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스트"><a href="#지난-포스트" class="headerlink" title="지난 포스트"></a>지난 포스트</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/">웹 프로그래밍 with Golang 3 - 정적 파일</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/">웹 프로그래밍 with Golang 4 - 라우팅</a></p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><hr><p>이번 시간에는 Form과 JSON을 이용하여 간단한 Contact 사이트를 만들어보겠습니다.</p><h2 id="HTML-lt-form-gt"><a href="#HTML-lt-form-gt" class="headerlink" title="HTML &lt;form&gt;"></a>HTML <code>&lt;form&gt;</code></h2><hr><p><code>&lt;form&gt;</code> 태그는 사용자로부터 데이터를 입력받기 위해 존재하는 문서 구획입니다.</p><p><code>&lt;form&gt;</code>은 <code>&lt;input&gt;</code> 태그와 함께 사용되는데 submit(제출)이 되면 직렬화(serialize)되어 서버로 전달됩니다.</p><h2 id="Form-페이지-작성"><a href="#Form-페이지-작성" class="headerlink" title="Form 페이지 작성"></a>Form 페이지 작성</h2><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/y8PyFYT/image.png" alt="https://i.ibb.co/y8PyFYT/image.png"></p><p>form에 작성한 내용이 어떻게 객체화되는지 알아보기 위해 아래 스크립트를 추가해봅시다.</p><p>(테스트 후에는 제거합니다.)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> formEl = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  formEl.addEventListener(<span class="string">&#x27;submit&#x27;</span>, <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    evt.preventDefault()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(evt.target)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> pair <span class="keyword">of</span> formData.entries()) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(pair[<span class="number">0</span>]+ <span class="string">&#x27;=&#x27;</span>+ pair[<span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/jL1cmds/image.png" alt="https://i.ibb.co/jL1cmds/image.png"></p><p><img src="https://i.ibb.co/Hp9dD1Z/image.png" alt="https://i.ibb.co/Hp9dD1Z/image.png"></p><p>HTML FormData의 경우 실제로 서버에 전달될 때에는 다음과 같이 인코딩 됩니다.</p><p><code>email=abc@gamil.com&amp;subject=안녕하세요&amp;message=sadadd</code></p><p><code>key=value</code>로 이루어져 있으며 <code>&amp;</code>로 구분합니다.</p><p>GET Method의 경우 URL에 붙으며 (Query String), POST Method의 경우 Body에 붙습니다.</p><p>이러한 인코딩 방식을 <code>application/x-www-form-urlencoded</code>라고 합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># HTTP POST 예제</span><br><span class="line"></span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: foo.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 48</span><br><span class="line"></span><br><span class="line">email=abc@gamil.com&amp;subject=안녕하세요&amp;message=sadadd</span><br></pre></td></tr></table></figure><h2 id="HTTP-요청-처리하기"><a href="#HTTP-요청-처리하기" class="headerlink" title="HTTP 요청 처리하기"></a>HTTP 요청 처리하기</h2><hr><p>Form을 이용하여 HTTP Request를 보내게 되면 완전히 페이지가 새로고침됩니다. 따라서 각 메서드별로 적절하게 응답을 해줄 필요가 있습니다.  이를 구현하기 위한 한가지 방법으로 템플릿 문법을 사용할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form.html --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; if .Success &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Thanks for your message!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; else &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;html/template&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ContactDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">  Email   <span class="keyword">string</span></span><br><span class="line">  Subject <span class="keyword">string</span></span><br><span class="line">  Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := mux.NewRouter()</span><br><span class="line">  tmpl := template.Must(template.ParseFiles(<span class="string">&quot;form.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">  r.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    tmpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">  &#125;).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  r.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    details := ContactDetails&#123;</span><br><span class="line">        Email:   r.FormValue(<span class="string">&quot;email&quot;</span>),</span><br><span class="line">        Subject: r.FormValue(<span class="string">&quot;subject&quot;</span>),</span><br><span class="line">        Message: r.FormValue(<span class="string">&quot;message&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Email: %s, Subject: %s Message: %s\n&quot;</span>, details.Email, details.Subject, details.Message)</span><br><span class="line">    </span><br><span class="line">    tmpl.Execute(w, <span class="keyword">struct</span>&#123; Success <span class="keyword">bool</span> &#125;&#123; <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.ibb.co/zHJXcnY/2.png" alt="https://i.ibb.co/zHJXcnY/2.png"></p><p><img src="https://i.ibb.co/vkMzPLL/3.png" alt="https://i.ibb.co/vkMzPLL/3.png"></p><img src='https://i.ibb.co/By3dQ5g/image.png' width='450' alt='https://i.ibb.co/By3dQ5g/image.png' /><p>브라우저에서 접속하면 기본적으로 GET 메서드를 사용한것과 동일합니다. 따라서 첫번째 핸들러 함수가 실행됩니다. POST 요청을하면 두번째 핸들러가 실행되어 “Thanks for your message!”가 출력되게 됩니다.</p><h2 id="Fetch를-이용한-비동기-통신"><a href="#Fetch를-이용한-비동기-통신" class="headerlink" title="Fetch를 이용한 비동기 통신"></a>Fetch를 이용한 비동기 통신</h2><hr><p>Fetch API가 웹 표준(<a href="https://fetch.spec.whatwg.org/">Living Standard</a>)으로 지정되면서 Ajax(Asynchronous JavaScript And XML), 즉 비동기 통신이 대세가 되고 있습니다. 원래 비동기 통신은 <code>XMLHttpRequest</code>를 사용했으나, 편리성이 떨어져 jQuery같은 서브 파티 라이브러리를 주로 사용했었습니다. <code>Fetch</code> 덕분에 더이상 서드파티 라이브러리에 의존할 필요 없이, 편리하게 비동기 통신을 구현할 수 있습니다.</p><p>비동기 통신을 하게되면 페이지 새로고침 없이 새로운 데이터를 수신하고 갱신할 수 있습니다. 위에서 언급한 <code>application/x-www-form-urlencoded</code> 방식을 사용해도 되지만, 직관성을 높이기 위하여 비동기 통신에서는 보통 클라이언트와 서버 모두<code>application/json</code> 방식으로 데이터를 인코딩합니다.</p><h3 id="자습-컨텐츠"><a href="#자습-컨텐츠" class="headerlink" title="자습 컨텐츠"></a>자습 컨텐츠</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Fetch_API/Using_Fetch">Fetch API에 대해서 (MDN)</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function">비동기 함수에 대해서 (MDN)</a></p><h2 id="Fetch-구현"><a href="#Fetch-구현" class="headerlink" title="Fetch 구현"></a>Fetch 구현</h2><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> formEl = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  formEl.addEventListener(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">async</span> evt =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    evt.preventDefault()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(evt.target)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> formData) obj[key] = value <span class="comment">// formData -&gt; JS object</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="keyword">await</span> fetch(<span class="string">&#x27;/&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(obj), <span class="comment">// JS Object -&gt; JSON String</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> responseData = <span class="keyword">await</span> result.json() <span class="comment">// Response Object -&gt; JS object</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    alert(<span class="built_in">JSON</span>.stringify(responseData))</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;html/template&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ContactDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">  Email   <span class="keyword">string</span></span><br><span class="line">  Subject <span class="keyword">string</span></span><br><span class="line">  Message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  r := mux.NewRouter()</span><br><span class="line">  tmpl := template.Must(template.ParseFiles(<span class="string">&quot;fetch.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">  r.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    tmpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">  &#125;).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  r.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> details ContactDetails</span><br><span class="line">    json.NewDecoder(r.Body).Decode(&amp;details) <span class="comment">// read body, then decode</span></span><br><span class="line">    json.NewEncoder(w).Encode(details) <span class="comment">// encode, then send to user</span></span><br><span class="line">  &#125;).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src='https://i.ibb.co/yg4yRcy/4.png' width='600' alt='https://i.ibb.co/yg4yRcy/4.png' /><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/forms/">https://gowebexamples.com/forms/</a></p><p><a href="https://gowebexamples.com/json/">https://gowebexamples.com/json/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Form/">Form</category>
      
      <category domain="https://jehwanyoo.net/tags/JSON/">JSON</category>
      
      <category domain="https://jehwanyoo.net/tags/Web-Programming-With-Golang/">Web Programming With Golang</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/06/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-5-Form-JSON/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>웹 프로그래밍 with Golang 4 - 라우팅</title>
      <link>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/</link>
      <guid>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/</guid>
      <pubDate>Tue, 05 Apr 2022 13:48:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;지난-포스팅&quot;&gt;&lt;a href=&quot;#지난-포스팅&quot; class=&quot;headerlink&quot; title=&quot;지난 포스팅&quot;&gt;&lt;/a&gt;지난 포스팅&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://jehwanyoo.net/2022/03/31/%EC%9B%</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="지난-포스팅"><a href="#지난-포스팅" class="headerlink" title="지난 포스팅"></a>지난 포스팅</h2><hr><p><a href="https://jehwanyoo.net/2022/03/31/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-1-Hello-World/">웹 프로그래밍 with Golang 1 - Hello, World!</a></p><p><a href="https://jehwanyoo.net/2022/04/02/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-2-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95/">웹 프로그래밍 with Golang 2 - 템플릿 문법</a></p><p><a href="https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-3-%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC/">웹 프로그래밍 with Golang 3 - 정적 파일</a></p><h2 id="라우팅-Routing"><a href="#라우팅-Routing" class="headerlink" title="라우팅 (Routing)"></a>라우팅 (Routing)</h2><hr><p>라우팅은 Restful API를 구축하기 위해 필수적인 기능이라고 할 수 있습니다.</p><p>라우트(route)는 사전적 의미로 <code>(특정한 루트를 따라 무엇을) 보내다[전송하다]</code>라는 의미를 가지고 있습니다.</p><p>즉, 라우팅은 사용자 요청이 들어왔을 때 해당 요청을 처리할 수 있는 서비스로 보내는 것을 의미합니다.</p><h2 id="라우터-패키지"><a href="#라우터-패키지" class="headerlink" title="라우터 패키지"></a>라우터 패키지</h2><hr><p>라우터를 만들기 위해서는 <code>http.ServeMux</code>를 사용하면 됩니다.</p><p>하지만 편리한 방법이 아니기 때문에 서드파티 패키지를 주로 사용합니다.</p><p>유명한 패키지로는</p><ul><li><a href="https://github.com/gin-gonic/gin">gin</a>  (Star: 57.2k)</li><li><a href="https://github.com/gorilla/mux">gorilla/mux</a> (Star: 16.3k)</li></ul><p>가 있습니다.</p><p><code>gin</code>은 Node.js의 <a href="https://expressjs.com/ko/">Express</a> 수준의 프레임워크로 내장 패키지인 <code>net/http</code>를 대체합니다.</p><p>반면에 <code>gorilla/mux</code>는 라우터 기능이 중점이며 <code>net/http</code> 모듈과 함께 사용됩니다.</p><p>라우팅에 대해 이해하기 위하여 이번 튜토리얼에서는 <code>gorilla/mux</code>를 사용하겠습니다.</p><p><code>gin</code>은 추후 챕터에서 다루겠습니다.</p><h2 id="Gorilla-Mux-설치"><a href="#Gorilla-Mux-설치" class="headerlink" title="Gorilla Mux 설치"></a>Gorilla Mux 설치</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gorilla/mux</span><br></pre></td></tr></table></figure><p><code>go get</code>으로 패키지를 설치합니다.</p><h2 id="라우터-코드"><a href="#라우터-코드" class="headerlink" title="라우터 코드"></a>라우터 코드</h2><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;/page/&#123;page&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        vars := mux.Vars(r)</span><br><span class="line">        title := vars[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        page := vars[<span class="string">&quot;page&quot;</span>]</span><br><span class="line"></span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;You&#x27;ve requested the book: %s on page %s\n&quot;</span>, title, page)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>라우터는 기존에 알고있던 <code>http.HandleFunc</code>와 유사합니다.</p><p><code>mux.Vars</code> 메서드를 이용하여 URL의 Path Parameter를 가져올 수 있습니다.</p><p>이밖에도 정규식을 활용하여 다양한 형태의 URL을 파싱할 수 있습니다.</p><h2 id="라우터-테스트"><a href="#라우터-테스트" class="headerlink" title="라우터 테스트"></a>라우터 테스트</h2><hr><p>{title}과 {page}를 임의로 설정하여 요청을 보내겠습니다.</p><p><code>주소/books/Harry Poter/page/5</code></p><img src='https://i.ibb.co/NTvcHmP/image.png' width='600' alt='Parameter Path' /><h2 id="메서드-제한하기"><a href="#메서드-제한하기" class="headerlink" title="메서드 제한하기"></a>메서드 제한하기</h2><hr><p>별도로 메서드(Method)를 제한하지 않으면 패턴이 일치하는 모든 요청에 대해 응답할 것입니다.</p><p>Restful API에는 4가지의 메서드를 사용합니다. (GET, POST, DELETE, PATCH)</p><p>용도에 맞게 메서드를 다음과 같이 제한시킬 필요가 있습니다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, CreateBook).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, ReadBook).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, UpdateBook).Methods(<span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;&quot;</span>, DeleteBook).Methods(<span class="string">&quot;DELETE&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Restful API에 대한 이해가 부족하다면 <a href="https://jehwanyoo.net/2021/05/19/%EC%A2%8B%EC%9D%80-REST-API-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EC%B0%B0/">좋은 REST API 설계 방법에 대한 고찰</a>이라는 포스팅을 한번 보시길 바랍니다.</p></blockquote><p>다음 시간에는 구조화된 Data를 주고 받기 위해 Form Value &amp; JSON을 활용하는 법에 대해 배워보겠습니다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><hr><p><a href="https://gowebexamples.com/routes-using-gorilla-mux/">https://gowebexamples.com/routes-using-gorilla-mux/</a></p>]]></content:encoded>
      
      
      <category domain="https://jehwanyoo.net/categories/Golang/">Golang</category>
      
      
      <category domain="https://jehwanyoo.net/tags/Golang/">Golang</category>
      
      <category domain="https://jehwanyoo.net/tags/Routing/">Routing</category>
      
      <category domain="https://jehwanyoo.net/tags/Web-Programming-With-Golang/">Web Programming With Golang</category>
      
      
      <comments>https://jehwanyoo.net/2022/04/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-with-Golang-4-%EB%9D%BC%EC%9A%B0%ED%8C%85/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
